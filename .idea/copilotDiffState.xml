<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/gig_service/API_Testing_Guide.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/API_Testing_Guide.md" />
              <option name="updatedContent" value="# Gig Service API Testing Guide&#10;&#10;## Prerequisites&#10;1. Start the gig service: `.\mvnw.cmd spring-boot:run`&#10;2. Service should be running on http://localhost:8080&#10;&#10;## Test Scenarios&#10;&#10;### 1. Create a Gig with Packages&#10;**Endpoint:** POST http://localhost:8080/api/gigs&#10;**Content-Type:** application/json&#10;&#10;**Request Body:**&#10;```json&#10;{&#10;  &quot;sellerId&quot;: &quot;123e4567-e89b-12d3-a456-426614174000&quot;,&#10;  &quot;title&quot;: &quot;Professional Logo Design Service&quot;,&#10;  &quot;description&quot;: &quot;I will create a stunning, professional logo for your business that captures your brand identity and stands out from the competition.&quot;,&#10;  &quot;platform&quot;: &quot;Instagram&quot;,&#10;  &quot;category&quot;: &quot;Graphic Design&quot;,&#10;  &quot;status&quot;: &quot;ACTIVE&quot;,&#10;  &quot;images&quot;: [&#10;    {&#10;      &quot;url&quot;: &quot;https://example.com/logo-portfolio-1.jpg&quot;,&#10;      &quot;isPrimary&quot;: true&#10;    },&#10;    {&#10;      &quot;url&quot;: &quot;https://example.com/logo-portfolio-2.jpg&quot;,&#10;      &quot;isPrimary&quot;: false&#10;    }&#10;  ],&#10;  &quot;packages&quot;: [&#10;    {&#10;      &quot;name&quot;: &quot;Basic Logo&quot;,&#10;      &quot;price&quot;: 25.00,&#10;      &quot;deliveryDays&quot;: 2,&#10;      &quot;description&quot;: &quot;1 logo concept, 2 revisions, PNG &amp; JPG files&quot;&#10;    },&#10;    {&#10;      &quot;name&quot;: &quot;Standard Logo&quot;,&#10;      &quot;price&quot;: 50.00,&#10;      &quot;deliveryDays&quot;: 3,&#10;      &quot;description&quot;: &quot;3 logo concepts, 5 revisions, PNG, JPG &amp; SVG files, social media kit&quot;&#10;    },&#10;    {&#10;      &quot;name&quot;: &quot;Premium Logo&quot;,&#10;      &quot;price&quot;: 100.00,&#10;      &quot;deliveryDays&quot;: 5,&#10;      &quot;description&quot;: &quot;5 logo concepts, unlimited revisions, all file formats, brand guidelines, business card design&quot;&#10;    }&#10;  ],&#10;  &quot;faqs&quot;: [&#10;    {&#10;      &quot;question&quot;: &quot;What file formats will I receive?&quot;,&#10;      &quot;answer&quot;: &quot;You'll receive PNG, JPG, and SVG formats for the Standard and Premium packages.&quot;&#10;    },&#10;    {&#10;      &quot;question&quot;: &quot;How many revisions are included?&quot;,&#10;      &quot;answer&quot;: &quot;Basic includes 2 revisions, Standard includes 5 revisions, and Premium includes unlimited revisions.&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;### 2. Get Gig with Specific Package Details&#10;**Endpoint:** GET http://localhost:8080/api/gigs/{gigId}/packages/{packageId}&#10;&#10;**Example:** GET http://localhost:8080/api/gigs/987fcdeb-51a2-43d1-b123-426614174001/packages/abc12345-6789-1011-1213-141516171819&#10;&#10;**Expected Response:**&#10;```json&#10;{&#10;  &quot;gigId&quot;: &quot;987fcdeb-51a2-43d1-b123-426614174001&quot;,&#10;  &quot;sellerId&quot;: &quot;123e4567-e89b-12d3-a456-426614174000&quot;,&#10;  &quot;title&quot;: &quot;Professional Logo Design Service&quot;,&#10;  &quot;description&quot;: &quot;I will create a stunning, professional logo for your business...&quot;,&#10;  &quot;platform&quot;: &quot;Instagram&quot;,&#10;  &quot;category&quot;: &quot;Graphic Design&quot;,&#10;  &quot;status&quot;: &quot;ACTIVE&quot;,&#10;  &quot;createdAt&quot;: &quot;2025-08-03T14:30:00&quot;,&#10;  &quot;updatedAt&quot;: &quot;2025-08-03T14:30:00&quot;,&#10;  &quot;images&quot;: [&#10;    {&#10;      &quot;url&quot;: &quot;https://example.com/logo-portfolio-1.jpg&quot;,&#10;      &quot;isPrimary&quot;: true&#10;    }&#10;  ],&#10;  &quot;faqs&quot;: [&#10;    {&#10;      &quot;question&quot;: &quot;What file formats will I receive?&quot;,&#10;      &quot;answer&quot;: &quot;You'll receive PNG, JPG, and SVG formats...&quot;&#10;    }&#10;  ],&#10;  &quot;allPackages&quot;: [&#10;    {&#10;      &quot;name&quot;: &quot;Basic Logo&quot;,&#10;      &quot;price&quot;: 25.00,&#10;      &quot;deliveryDays&quot;: 2,&#10;      &quot;description&quot;: &quot;1 logo concept, 2 revisions, PNG &amp; JPG files&quot;&#10;    },&#10;    {&#10;      &quot;name&quot;: &quot;Standard Logo&quot;,&#10;      &quot;price&quot;: 50.00,&#10;      &quot;deliveryDays&quot;: 3,&#10;      &quot;description&quot;: &quot;3 logo concepts, 5 revisions, PNG, JPG &amp; SVG files, social media kit&quot;&#10;    }&#10;  ],&#10;  &quot;selectedPackage&quot;: {&#10;    &quot;packageId&quot;: &quot;abc12345-6789-1011-1213-141516171819&quot;,&#10;    &quot;gigId&quot;: &quot;987fcdeb-51a2-43d1-b123-426614174001&quot;,&#10;    &quot;name&quot;: &quot;Standard Logo&quot;,&#10;    &quot;price&quot;: 50.00,&#10;    &quot;deliveryDays&quot;: 3,&#10;    &quot;description&quot;: &quot;3 logo concepts, 5 revisions, PNG, JPG &amp; SVG files, social media kit&quot;&#10;  }&#10;}&#10;```&#10;&#10;### 3. Verify Gig and Package Existence&#10;**Endpoint:** GET http://localhost:8080/api/gigs/{gigId}/packages/{packageId}/verify&#10;&#10;**Example:** GET http://localhost:8080/api/gigs/987fcdeb-51a2-43d1-b123-426614174001/packages/abc12345-6789-1011-1213-141516171819/verify&#10;&#10;**Expected Response:**&#10;```json&#10;{&#10;  &quot;exists&quot;: true&#10;}&#10;```&#10;&#10;### 4. Get All Packages for a Gig&#10;**Endpoint:** GET http://localhost:8080/api/gigs/{gigId}/packages&#10;&#10;**Example:** GET http://localhost:8080/api/gigs/987fcdeb-51a2-43d1-b123-426614174001/packages&#10;&#10;**Expected Response:**&#10;```json&#10;[&#10;  {&#10;    &quot;packageId&quot;: &quot;abc12345-6789-1011-1213-141516171819&quot;,&#10;    &quot;gigId&quot;: &quot;987fcdeb-51a2-43d1-b123-426614174001&quot;,&#10;    &quot;name&quot;: &quot;Basic Logo&quot;,&#10;    &quot;price&quot;: 25.00,&#10;    &quot;deliveryDays&quot;: 2,&#10;    &quot;description&quot;: &quot;1 logo concept, 2 revisions, PNG &amp; JPG files&quot;&#10;  },&#10;  {&#10;    &quot;packageId&quot;: &quot;def67890-1234-5678-9012-345678901234&quot;,&#10;    &quot;gigId&quot;: &quot;987fcdeb-51a2-43d1-b123-426614174001&quot;,&#10;    &quot;name&quot;: &quot;Standard Logo&quot;,&#10;    &quot;price&quot;: 50.00,&#10;    &quot;deliveryDays&quot;: 3,&#10;    &quot;description&quot;: &quot;3 logo concepts, 5 revisions, PNG, JPG &amp; SVG files, social media kit&quot;&#10;  },&#10;  {&#10;    &quot;packageId&quot;: &quot;ghi12345-6789-0123-4567-890123456789&quot;,&#10;    &quot;gigId&quot;: &quot;987fcdeb-51a2-43d1-b123-426614174001&quot;,&#10;    &quot;name&quot;: &quot;Premium Logo&quot;,&#10;    &quot;price&quot;: 100.00,&#10;    &quot;deliveryDays&quot;: 5,&#10;    &quot;description&quot;: &quot;5 logo concepts, unlimited revisions, all file formats, brand guidelines, business card design&quot;&#10;  }&#10;]&#10;```&#10;&#10;### 5. Error Cases to Test&#10;&#10;#### Invalid Gig ID:&#10;**Endpoint:** GET http://localhost:8080/api/gigs/invalid-id/packages/any-package-id&#10;**Expected Response:** 404 Not Found&#10;&#10;#### Invalid Package ID:&#10;**Endpoint:** GET http://localhost:8080/api/gigs/valid-gig-id/packages/invalid-package-id&#10;**Expected Response:** 404 Not Found&#10;&#10;#### Package doesn't belong to Gig:&#10;**Endpoint:** GET http://localhost:8080/api/gigs/gig-id-1/packages/package-from-gig-id-2&#10;**Expected Response:** 404 Not Found&#10;&#10;## Testing with cURL Commands&#10;&#10;### Create Gig:&#10;```bash&#10;curl -X POST http://localhost:8080/api/gigs \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d @create-gig.json&#10;```&#10;&#10;### Get Gig with Package:&#10;```bash&#10;curl -X GET &quot;http://localhost:8080/api/gigs/{gigId}/packages/{packageId}&quot;&#10;```&#10;&#10;### Verify Existence:&#10;```bash&#10;curl -X GET &quot;http://localhost:8080/api/gigs/{gigId}/packages/{packageId}/verify&quot;&#10;```&#10;&#10;### Get All Packages:&#10;```bash&#10;curl -X GET &quot;http://localhost:8080/api/gigs/{gigId}/packages&quot;&#10;```&#10;&#10;## Testing with Postman&#10;&#10;1. Import the endpoints into Postman&#10;2. Set up environment variables:&#10;   - `baseUrl`: http://localhost:8080&#10;   - `gigId`: (use the ID from create response)&#10;   - `packageId`: (use a package ID from create response)&#10;&#10;3. Create a test collection with the following requests:&#10;   - POST {{baseUrl}}/api/gigs&#10;   - GET {{baseUrl}}/api/gigs/{{gigId}}/packages/{{packageId}}&#10;   - GET {{baseUrl}}/api/gigs/{{gigId}}/packages/{{packageId}}/verify&#10;   - GET {{baseUrl}}/api/gigs/{{gigId}}/packages&#10;&#10;## Testing Steps:&#10;&#10;1. **Start the service:** `.\mvnw.cmd spring-boot:run`&#10;2. **Create a gig** using the POST endpoint and note the `gigId` and package IDs from the response&#10;3. **Test the new endpoints** using the actual IDs from step 2&#10;4. **Verify validation** by testing with invalid IDs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/controller/GigController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/controller/GigController.java" />
              <option name="originalContent" value="package com.example.gig_service.controller;&#10;&#10;import com.example.gig_service.dto.*;&#10;import com.example.gig_service.service.GigService;&#10;import com.example.gig_service.service.ImageService;&#10;import com.fasterxml.jackson.core.type.TypeReference;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.util.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/gigs&quot;)&#10;public class GigController {&#10;&#10;    @Autowired&#10;    private GigService gigService;&#10;&#10;    @Autowired&#10;    private ImageService imageService;&#10;&#10;    @PostMapping&#10;    public GigResponseDTO createGig(@RequestBody GigRequestDTO gigRequestDTO) {&#10;        return gigService.createGig(gigRequestDTO);&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;GigResponseDTO&gt; getAllGigs() {&#10;        return gigService.getAllGigs();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public GigResponseDTO getGigById(@PathVariable UUID id) {&#10;        return gigService.getGigById(id);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public GigResponseDTO updateGig(@PathVariable UUID id, @RequestBody GigRequestDTO gigRequestDTO) {&#10;        return gigService.updateGig(id, gigRequestDTO);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void deleteGig(@PathVariable UUID id) {&#10;        gigService.deleteGig(id);&#10;    }&#10;&#10;    @PostMapping(&quot;/create-with-images&quot;)&#10;    public ResponseEntity&lt;GigResponseDTO&gt; createGigWithImages(&#10;            @RequestParam(&quot;sellerId&quot;) UUID sellerId,&#10;            @RequestParam(&quot;title&quot;) String title,&#10;            @RequestParam(&quot;description&quot;) String description,&#10;            @RequestParam(&quot;platform&quot;) String platform,&#10;            @RequestParam(&quot;category&quot;) String category,&#10;            @RequestParam(&quot;status&quot;) String status,&#10;            @RequestParam(value = &quot;images&quot;, required = false) MultipartFile[] imageFiles,&#10;            @RequestParam(value = &quot;primaryImageIndex&quot;, required = false, defaultValue = &quot;0&quot;) int primaryImageIndex,&#10;            @RequestParam(value = &quot;packages&quot;, required = false) String packagesJson,&#10;            @RequestParam(value = &quot;faqs&quot;, required = false) String faqsJson) {&#10;&#10;        try {&#10;            GigRequestDTO gigRequestDTO = new GigRequestDTO();&#10;            gigRequestDTO.setSellerId(sellerId);&#10;            gigRequestDTO.setTitle(title);&#10;            gigRequestDTO.setDescription(description);&#10;            gigRequestDTO.setPlatform(platform);&#10;            gigRequestDTO.setCategory(category);&#10;            gigRequestDTO.setStatus(status);&#10;&#10;            // Handle image uploads&#10;            if (imageFiles != null &amp;&amp; imageFiles.length &gt; 0) {&#10;                List&lt;String&gt; imageUrls = imageService.uploadMultipleImages(imageFiles);&#10;                List&lt;GigImageDTO&gt; imageDTOs = new ArrayList&lt;&gt;();&#10;&#10;                for (int i = 0; i &lt; imageUrls.size(); i++) {&#10;                    GigImageDTO imageDTO = new GigImageDTO();&#10;                    imageDTO.setUrl(imageUrls.get(i));&#10;                    imageDTO.setIsPrimary(i == primaryImageIndex);&#10;                    imageDTOs.add(imageDTO);&#10;                }&#10;                gigRequestDTO.setImages(imageDTOs);&#10;            }&#10;&#10;            // Handle packages JSON&#10;            if (packagesJson != null &amp;&amp; !packagesJson.trim().isEmpty()) {&#10;                ObjectMapper mapper = new ObjectMapper();&#10;                List&lt;GigPackageDTO&gt; packages = mapper.readValue(packagesJson,&#10;                    new TypeReference&lt;List&lt;GigPackageDTO&gt;&gt;() {});&#10;                gigRequestDTO.setPackages(packages);&#10;            }&#10;&#10;            // Handle FAQs JSON&#10;            if (faqsJson != null &amp;&amp; !faqsJson.trim().isEmpty()) {&#10;                ObjectMapper mapper = new ObjectMapper();&#10;                List&lt;GigFaqDTO&gt; faqs = mapper.readValue(faqsJson,&#10;                    new TypeReference&lt;List&lt;GigFaqDTO&gt;&gt;() {});&#10;                gigRequestDTO.setFaqs(faqs);&#10;            }&#10;&#10;            GigResponseDTO response = gigService.createGig(gigRequestDTO);&#10;            return ResponseEntity.ok(response);&#10;&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/upload-image&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; uploadImage(@RequestParam(&quot;file&quot;) MultipartFile file) {&#10;        try {&#10;            String imageUrl = imageService.uploadImage(file);&#10;            Map&lt;String, String&gt; response = new HashMap&lt;&gt;();&#10;            response.put(&quot;imageUrl&quot;, imageUrl);&#10;            response.put(&quot;message&quot;, &quot;Image uploaded successfully&quot;);&#10;            return ResponseEntity.ok(response);&#10;        } catch (Exception e) {&#10;            Map&lt;String, String&gt; errorResponse = new HashMap&lt;&gt;();&#10;            errorResponse.put(&quot;error&quot;, &quot;Failed to upload image: &quot; + e.getMessage());&#10;            return ResponseEntity.badRequest().body(errorResponse);&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/upload-images&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; uploadImages(@RequestParam(&quot;files&quot;) MultipartFile[] files) {&#10;        try {&#10;            if (files.length == 0) {&#10;                Map&lt;String, Object&gt; errorResponse = new HashMap&lt;&gt;();&#10;                errorResponse.put(&quot;error&quot;, &quot;No files provided&quot;);&#10;                return ResponseEntity.badRequest().body(errorResponse);&#10;            }&#10;&#10;            List&lt;String&gt; imageUrls = imageService.uploadMultipleImages(files);&#10;            Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();&#10;            response.put(&quot;imageUrls&quot;, imageUrls);&#10;            response.put(&quot;message&quot;, &quot;Images uploaded successfully&quot;);&#10;            response.put(&quot;count&quot;, imageUrls.size());&#10;            return ResponseEntity.ok(response);&#10;        } catch (Exception e) {&#10;            Map&lt;String, Object&gt; errorResponse = new HashMap&lt;&gt;();&#10;            errorResponse.put(&quot;error&quot;, &quot;Failed to upload images: &quot; + e.getMessage());&#10;            return ResponseEntity.badRequest().body(errorResponse);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.gig_service.controller;&#13;&#10;&#13;&#10;import com.example.gig_service.dto.*;&#13;&#10;import com.example.gig_service.service.GigService;&#13;&#10;import com.example.gig_service.service.ImageService;&#13;&#10;import com.fasterxml.jackson.core.type.TypeReference;&#13;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.http.ResponseEntity;&#13;&#10;import org.springframework.web.bind.annotation.*;&#13;&#10;import org.springframework.web.multipart.MultipartFile;&#13;&#10;&#13;&#10;import java.util.*;&#13;&#10;&#13;&#10;@RestController&#13;&#10;@RequestMapping(&quot;/api/gigs&quot;)&#13;&#10;public class GigController {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private GigService gigService;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private ImageService imageService;&#13;&#10;&#13;&#10;    @PostMapping&#13;&#10;    public GigResponseDTO createGig(@RequestBody GigRequestDTO gigRequestDTO) {&#13;&#10;        return gigService.createGig(gigRequestDTO);&#13;&#10;    }&#13;&#10;&#13;&#10;    @GetMapping&#13;&#10;    public List&lt;GigResponseDTO&gt; getAllGigs() {&#13;&#10;        return gigService.getAllGigs();&#13;&#10;    }&#13;&#10;&#13;&#10;    @GetMapping(&quot;/{id}&quot;)&#13;&#10;    public GigResponseDTO getGigById(@PathVariable UUID id) {&#13;&#10;        return gigService.getGigById(id);&#13;&#10;    }&#13;&#10;&#13;&#10;    @PutMapping(&quot;/{id}&quot;)&#13;&#10;    public GigResponseDTO updateGig(@PathVariable UUID id, @RequestBody GigRequestDTO gigRequestDTO) {&#13;&#10;        return gigService.updateGig(id, gigRequestDTO);&#13;&#10;    }&#13;&#10;&#13;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#13;&#10;    public void deleteGig(@PathVariable UUID id) {&#13;&#10;        gigService.deleteGig(id);&#13;&#10;    }&#13;&#10;&#13;&#10;    @PostMapping(&quot;/create-with-images&quot;)&#13;&#10;    public ResponseEntity&lt;GigResponseDTO&gt; createGigWithImages(&#13;&#10;            @RequestParam(&quot;sellerId&quot;) UUID sellerId,&#13;&#10;            @RequestParam(&quot;title&quot;) String title,&#13;&#10;            @RequestParam(&quot;description&quot;) String description,&#13;&#10;            @RequestParam(&quot;platform&quot;) String platform,&#13;&#10;            @RequestParam(&quot;category&quot;) String category,&#13;&#10;            @RequestParam(&quot;status&quot;) String status,&#13;&#10;            @RequestParam(value = &quot;images&quot;, required = false) MultipartFile[] imageFiles,&#13;&#10;            @RequestParam(value = &quot;primaryImageIndex&quot;, required = false, defaultValue = &quot;0&quot;) int primaryImageIndex,&#13;&#10;            @RequestParam(value = &quot;packages&quot;, required = false) String packagesJson,&#13;&#10;            @RequestParam(value = &quot;faqs&quot;, required = false) String faqsJson) {&#13;&#10;&#13;&#10;        try {&#13;&#10;            GigRequestDTO gigRequestDTO = new GigRequestDTO();&#13;&#10;            gigRequestDTO.setSellerId(sellerId);&#13;&#10;            gigRequestDTO.setTitle(title);&#13;&#10;            gigRequestDTO.setDescription(description);&#13;&#10;            gigRequestDTO.setPlatform(platform);&#13;&#10;            gigRequestDTO.setCategory(category);&#13;&#10;            gigRequestDTO.setStatus(status);&#13;&#10;&#13;&#10;            // Handle image uploads&#13;&#10;            if (imageFiles != null &amp;&amp; imageFiles.length &gt; 0) {&#13;&#10;                List&lt;String&gt; imageUrls = imageService.uploadMultipleImages(imageFiles);&#13;&#10;                List&lt;GigImageDTO&gt; imageDTOs = new ArrayList&lt;&gt;();&#13;&#10;&#13;&#10;                for (int i = 0; i &lt; imageUrls.size(); i++) {&#13;&#10;                    GigImageDTO imageDTO = new GigImageDTO();&#13;&#10;                    imageDTO.setUrl(imageUrls.get(i));&#13;&#10;                    imageDTO.setIsPrimary(i == primaryImageIndex);&#13;&#10;                    imageDTOs.add(imageDTO);&#13;&#10;                }&#13;&#10;                gigRequestDTO.setImages(imageDTOs);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Handle packages JSON&#13;&#10;            if (packagesJson != null &amp;&amp; !packagesJson.trim().isEmpty()) {&#13;&#10;                ObjectMapper mapper = new ObjectMapper();&#13;&#10;                List&lt;GigPackageDTO&gt; packages = mapper.readValue(packagesJson,&#13;&#10;                    new TypeReference&lt;List&lt;GigPackageDTO&gt;&gt;() {});&#13;&#10;                gigRequestDTO.setPackages(packages);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Handle FAQs JSON&#13;&#10;            if (faqsJson != null &amp;&amp; !faqsJson.trim().isEmpty()) {&#13;&#10;                ObjectMapper mapper = new ObjectMapper();&#13;&#10;                List&lt;GigFaqDTO&gt; faqs = mapper.readValue(faqsJson,&#13;&#10;                    new TypeReference&lt;List&lt;GigFaqDTO&gt;&gt;() {});&#13;&#10;                gigRequestDTO.setFaqs(faqs);&#13;&#10;            }&#13;&#10;&#13;&#10;            GigResponseDTO response = gigService.createGig(gigRequestDTO);&#13;&#10;            return ResponseEntity.ok(response);&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            return ResponseEntity.badRequest().build();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @PostMapping(&quot;/upload-image&quot;)&#13;&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; uploadImage(@RequestParam(&quot;file&quot;) MultipartFile file) {&#13;&#10;        try {&#13;&#10;            String imageUrl = imageService.uploadImage(file);&#13;&#10;            Map&lt;String, String&gt; response = new HashMap&lt;&gt;();&#13;&#10;            response.put(&quot;imageUrl&quot;, imageUrl);&#13;&#10;            response.put(&quot;message&quot;, &quot;Image uploaded successfully&quot;);&#13;&#10;            return ResponseEntity.ok(response);&#13;&#10;        } catch (Exception e) {&#13;&#10;            Map&lt;String, String&gt; errorResponse = new HashMap&lt;&gt;();&#13;&#10;            errorResponse.put(&quot;error&quot;, &quot;Failed to upload image: &quot; + e.getMessage());&#13;&#10;            return ResponseEntity.badRequest().body(errorResponse);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @PostMapping(&quot;/upload-images&quot;)&#13;&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; uploadImages(@RequestParam(&quot;files&quot;) MultipartFile[] files) {&#13;&#10;        try {&#13;&#10;            if (files.length == 0) {&#13;&#10;                Map&lt;String, Object&gt; errorResponse = new HashMap&lt;&gt;();&#13;&#10;                errorResponse.put(&quot;error&quot;, &quot;No files provided&quot;);&#13;&#10;                return ResponseEntity.badRequest().body(errorResponse);&#13;&#10;            }&#13;&#10;&#13;&#10;            List&lt;String&gt; imageUrls = imageService.uploadMultipleImages(files);&#13;&#10;            Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();&#13;&#10;            response.put(&quot;imageUrls&quot;, imageUrls);&#13;&#10;            response.put(&quot;message&quot;, &quot;Images uploaded successfully&quot;);&#13;&#10;            response.put(&quot;count&quot;, imageUrls.size());&#13;&#10;            return ResponseEntity.ok(response);&#13;&#10;        } catch (Exception e) {&#13;&#10;            Map&lt;String, Object&gt; errorResponse = new HashMap&lt;&gt;();&#13;&#10;            errorResponse.put(&quot;error&quot;, &quot;Failed to upload images: &quot; + e.getMessage());&#13;&#10;            return ResponseEntity.badRequest().body(errorResponse);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get gig and specific package details by gigId and packageId&#13;&#10;     * Verifies that both gig and package exist and that the package belongs to the gig&#13;&#10;     */&#13;&#10;    @GetMapping(&quot;/{gigId}/packages/{packageId}&quot;)&#13;&#10;    public ResponseEntity&lt;GigWithPackageDetailsDTO&gt; getGigWithPackageDetails(&#13;&#10;            @PathVariable UUID gigId,&#13;&#10;            @PathVariable UUID packageId) {&#13;&#10;        try {&#13;&#10;            GigWithPackageDetailsDTO response = gigService.getGigWithPackageDetails(gigId, packageId);&#13;&#10;            return ResponseEntity.ok(response);&#13;&#10;        } catch (NoSuchElementException e) {&#13;&#10;            return ResponseEntity.notFound().build();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Verify if a gig and package combination exists&#13;&#10;     */&#13;&#10;    @GetMapping(&quot;/{gigId}/packages/{packageId}/verify&quot;)&#13;&#10;    public ResponseEntity&lt;Map&lt;String, Boolean&gt;&gt; verifyGigAndPackageExists(&#13;&#10;            @PathVariable UUID gigId,&#13;&#10;            @PathVariable UUID packageId) {&#13;&#10;        boolean exists = gigService.verifyGigAndPackageExists(gigId, packageId);&#13;&#10;        Map&lt;String, Boolean&gt; response = new HashMap&lt;&gt;();&#13;&#10;        response.put(&quot;exists&quot;, exists);&#13;&#10;        return ResponseEntity.ok(response);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get all packages for a specific gig&#13;&#10;     */&#13;&#10;    @GetMapping(&quot;/{gigId}/packages&quot;)&#13;&#10;    public ResponseEntity&lt;List&lt;GigPackageDetailsDTO&gt;&gt; getPackagesByGigId(@PathVariable UUID gigId) {&#13;&#10;        try {&#13;&#10;            List&lt;GigPackageDetailsDTO&gt; packages = gigService.getPackagesByGigId(gigId);&#13;&#10;            return ResponseEntity.ok(packages);&#13;&#10;        } catch (NoSuchElementException e) {&#13;&#10;            return ResponseEntity.notFound().build();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/dto/GigPackageDetailsDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/dto/GigPackageDetailsDTO.java" />
              <option name="updatedContent" value="package com.example.gig_service.dto;&#10;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Getter&#10;@Setter&#10;public class GigPackageDetailsDTO {&#10;    private UUID packageId;&#10;    private UUID gigId;&#10;    private String name;&#10;    private BigDecimal price;&#10;    private int deliveryDays;&#10;    private String description;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/dto/GigWithPackageDetailsDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/dto/GigWithPackageDetailsDTO.java" />
              <option name="updatedContent" value="package com.example.gig_service.dto;&#10;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Getter&#10;@Setter&#10;public class GigWithPackageDetailsDTO {&#10;    // Gig details&#10;    private UUID gigId;&#10;    private UUID sellerId;&#10;    private String title;&#10;    private String description;&#10;    private String platform;&#10;    private String category;&#10;    private String status;&#10;    private LocalDateTime createdAt;&#10;    private LocalDateTime updatedAt;&#10;    &#10;    // All gig images&#10;    private List&lt;GigImageDTO&gt; images;&#10;    &#10;    // All gig FAQs&#10;    private List&lt;GigFaqDTO&gt; faqs;&#10;    &#10;    // All packages in the gig&#10;    private List&lt;GigPackageDTO&gt; allPackages;&#10;    &#10;    // Specific package details&#10;    private GigPackageDetailsDTO selectedPackage;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/repository/GigPackageRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/repository/GigPackageRepository.java" />
              <option name="originalContent" value="package com.example.gig_service.repository;&#10;&#10;import com.example.gig_service.entity.GigPackage;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;import java.util.UUID;&#10;&#10;public interface GigPackageRepository extends JpaRepository&lt;GigPackage, UUID&gt; {}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.gig_service.repository;&#10;&#10;import com.example.gig_service.entity.GigPackage;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;public interface GigPackageRepository extends JpaRepository&lt;GigPackage, UUID&gt; {&#10;    &#10;    // Find all packages for a specific gig&#10;    List&lt;GigPackage&gt; findByGigId(UUID gigId);&#10;    &#10;    // Find a specific package within a gig&#10;    @Query(&quot;SELECT gp FROM GigPackage gp WHERE gp.gig.id = :gigId AND gp.id = :packageId&quot;)&#10;    Optional&lt;GigPackage&gt; findByGigIdAndPackageId(@Param(&quot;gigId&quot;) UUID gigId, @Param(&quot;packageId&quot;) UUID packageId);&#10;    &#10;    // Check if a package exists within a specific gig&#10;    boolean existsByGigIdAndId(UUID gigId, UUID packageId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/service/GigService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/src/main/java/com/example/gig_service/service/GigService.java" />
              <option name="originalContent" value="package com.example.gig_service.service;&#10;&#10;import com.example.gig_service.dto.*;&#10;import com.example.gig_service.entity.Gig;&#10;import com.example.gig_service.entity.GigFaq;&#10;import com.example.gig_service.entity.GigImage;&#10;import com.example.gig_service.entity.GigPackage;&#10;import com.example.gig_service.repository.GigRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.NoSuchElementException;&#10;import java.util.UUID;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class GigService {&#10;&#10;    @Autowired&#10;    private GigRepository gigRepository;&#10;&#10;    public GigResponseDTO createGig(GigRequestDTO dto) {&#10;        Gig gig = new Gig();&#10;        gig.setSellerId(dto.getSellerId());&#10;        gig.setTitle(dto.getTitle());&#10;        gig.setDescription(dto.getDescription());&#10;        gig.setPlatform(dto.getPlatform());&#10;        gig.setCategory(dto.getCategory());&#10;        gig.setStatus(dto.getStatus());&#10;&#10;        // --- Map Images ---&#10;        if (dto.getImages() != null) {&#10;            List&lt;GigImage&gt; images = dto.getImages().stream().map(imgDTO -&gt; {&#10;                GigImage img = new GigImage();&#10;                img.setUrl(imgDTO.getUrl());&#10;                img.setIsPrimary(imgDTO.isIsPrimary());&#10;                img.setGig(gig); // Important: Set parent!&#10;                return img;&#10;            }).collect(Collectors.toList());&#10;            gig.setImages(images);&#10;        }&#10;&#10;        // --- Map Packages ---&#10;        if (dto.getPackages() != null) {&#10;            List&lt;GigPackage&gt; packages = dto.getPackages().stream().map(pkgDTO -&gt; {&#10;                GigPackage pkg = new GigPackage();&#10;                pkg.setName(pkgDTO.getName());&#10;                pkg.setPrice(pkgDTO.getPrice());&#10;                pkg.setDeliveryDays(pkgDTO.getDeliveryDays());&#10;                pkg.setDescription(pkgDTO.getDescription());&#10;                pkg.setGig(gig); // Important: Set parent!&#10;                return pkg;&#10;            }).collect(Collectors.toList());&#10;            gig.setPackages(packages);&#10;        }&#10;&#10;        // --- Map FAQs ---&#10;        if (dto.getFaqs() != null) {&#10;            List&lt;GigFaq&gt; faqs = dto.getFaqs().stream().map(faqDTO -&gt; {&#10;                GigFaq faq = new GigFaq();&#10;                faq.setQuestion(faqDTO.getQuestion());&#10;                faq.setAnswer(faqDTO.getAnswer());&#10;                faq.setGig(gig); // Important: Set parent!&#10;                return faq;&#10;            }).collect(Collectors.toList());&#10;            gig.setFaqs(faqs);&#10;        }&#10;&#10;        Gig savedGig = gigRepository.save(gig);&#10;        return mapToResponseDTO(savedGig);&#10;    }&#10;&#10;    public List&lt;GigResponseDTO&gt; getAllGigs() {&#10;        List&lt;Gig&gt; gigs = gigRepository.findAll();&#10;        return gigs.stream()&#10;                .map(this::mapToResponseDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public GigResponseDTO getGigById(UUID id) {&#10;        Gig gig = gigRepository.findById(id)&#10;                .orElseThrow(() -&gt; new NoSuchElementException(&quot;Gig not found&quot;));&#10;        return mapToResponseDTO(gig);&#10;    }&#10;&#10;    public GigResponseDTO updateGig(UUID id, GigRequestDTO dto) {&#10;        Gig gig = gigRepository.findById(id)&#10;                .orElseThrow(() -&gt; new NoSuchElementException(&quot;Gig not found&quot;));&#10;        gig.setSellerId(dto.getSellerId());&#10;        gig.setTitle(dto.getTitle());&#10;        gig.setDescription(dto.getDescription());&#10;        gig.setPlatform(dto.getPlatform());&#10;        gig.setCategory(dto.getCategory());&#10;        gig.setStatus(dto.getStatus());&#10;&#10;        // --- Update Images ---&#10;        gig.getImages().clear();&#10;        if (dto.getImages() != null) {&#10;            List&lt;GigImage&gt; images = dto.getImages().stream().map(imgDTO -&gt; {&#10;                GigImage img = new GigImage();&#10;                img.setUrl(imgDTO.getUrl());&#10;                img.setIsPrimary(imgDTO.isIsPrimary());&#10;                img.setGig(gig);&#10;                return img;&#10;            }).collect(Collectors.toList());&#10;            gig.getImages().addAll(images);&#10;        }&#10;&#10;        // --- Update Packages ---&#10;        gig.getPackages().clear();&#10;        if (dto.getPackages() != null) {&#10;            List&lt;GigPackage&gt; packages = dto.getPackages().stream().map(pkgDTO -&gt; {&#10;                GigPackage pkg = new GigPackage();&#10;                pkg.setName(pkgDTO.getName());&#10;                pkg.setPrice(pkgDTO.getPrice());&#10;                pkg.setDeliveryDays(pkgDTO.getDeliveryDays());&#10;                pkg.setDescription(pkgDTO.getDescription());&#10;                pkg.setGig(gig);&#10;                return pkg;&#10;            }).collect(Collectors.toList());&#10;            gig.getPackages().addAll(packages);&#10;        }&#10;&#10;        // --- Update FAQs ---&#10;        gig.getFaqs().clear();&#10;        if (dto.getFaqs() != null) {&#10;            List&lt;GigFaq&gt; faqs = dto.getFaqs().stream().map(faqDTO -&gt; {&#10;                GigFaq faq = new GigFaq();&#10;                faq.setQuestion(faqDTO.getQuestion());&#10;                faq.setAnswer(faqDTO.getAnswer());&#10;                faq.setGig(gig);&#10;                return faq;&#10;            }).collect(Collectors.toList());&#10;            gig.getFaqs().addAll(faqs);&#10;        }&#10;&#10;        Gig updatedGig = gigRepository.save(gig);&#10;        return mapToResponseDTO(updatedGig);&#10;    }&#10;&#10;    public void deleteGig(UUID id) {&#10;        if (!gigRepository.existsById(id)) {&#10;            throw new NoSuchElementException(&quot;Gig not found&quot;);&#10;        }&#10;        gigRepository.deleteById(id);&#10;    }&#10;&#10;    // --- Helper: Entity → DTO ---&#10;    private GigResponseDTO mapToResponseDTO(Gig gig) {&#10;        GigResponseDTO dto = new GigResponseDTO();&#10;        dto.setId(gig.getId());&#10;        dto.setSellerId(gig.getSellerId());&#10;        dto.setTitle(gig.getTitle());&#10;        dto.setDescription(gig.getDescription());&#10;        dto.setPlatform(gig.getPlatform());&#10;        dto.setCategory(gig.getCategory());&#10;        dto.setStatus(gig.getStatus());&#10;        dto.setCreatedAt(gig.getCreatedAt());&#10;        dto.setUpdatedAt(gig.getUpdatedAt());&#10;&#10;        // --- Map Images ---&#10;        if (gig.getImages() != null) {&#10;            List&lt;GigImageDTO&gt; images = gig.getImages().stream().map(img -&gt; {&#10;                GigImageDTO imgDTO = new GigImageDTO();&#10;                imgDTO.setUrl(img.getUrl());&#10;                imgDTO.setIsPrimary(img.isIsPrimary());&#10;                return imgDTO;&#10;            }).collect(Collectors.toList());&#10;            dto.setImages(images);&#10;        }&#10;&#10;        // --- Map Packages ---&#10;        if (gig.getPackages() != null) {&#10;            List&lt;GigPackageDTO&gt; packages = gig.getPackages().stream().map(pkg -&gt; {&#10;                GigPackageDTO pkgDTO = new GigPackageDTO();&#10;                pkgDTO.setName(pkg.getName());&#10;                pkgDTO.setPrice(pkg.getPrice());&#10;                pkgDTO.setDeliveryDays(pkg.getDeliveryDays());&#10;                pkgDTO.setDescription(pkg.getDescription());&#10;                return pkgDTO;&#10;            }).collect(Collectors.toList());&#10;            dto.setPackages(packages);&#10;        }&#10;&#10;        // --- Map FAQs ---&#10;        if (gig.getFaqs() != null) {&#10;            List&lt;GigFaqDTO&gt; faqs = gig.getFaqs().stream().map(faq -&gt; {&#10;                GigFaqDTO faqDTO = new GigFaqDTO();&#10;                faqDTO.setQuestion(faq.getQuestion());&#10;                faqDTO.setAnswer(faq.getAnswer());&#10;                return faqDTO;&#10;            }).collect(Collectors.toList());&#10;            dto.setFaqs(faqs);&#10;        }&#10;&#10;        return dto;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.gig_service.service;&#13;&#10;&#13;&#10;import com.example.gig_service.dto.*;&#13;&#10;import com.example.gig_service.entity.Gig;&#13;&#10;import com.example.gig_service.entity.GigFaq;&#13;&#10;import com.example.gig_service.entity.GigImage;&#13;&#10;import com.example.gig_service.entity.GigPackage;&#13;&#10;import com.example.gig_service.repository.GigPackageRepository;&#13;&#10;import com.example.gig_service.repository.GigRepository;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;import java.util.NoSuchElementException;&#13;&#10;import java.util.UUID;&#13;&#10;import java.util.stream.Collectors;&#13;&#10;&#13;&#10;@Service&#13;&#10;public class GigService {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private GigRepository gigRepository;&#13;&#10;    &#13;&#10;    @Autowired&#13;&#10;    private GigPackageRepository gigPackageRepository;&#13;&#10;&#13;&#10;    public GigResponseDTO createGig(GigRequestDTO dto) {&#13;&#10;        Gig gig = new Gig();&#13;&#10;        gig.setSellerId(dto.getSellerId());&#13;&#10;        gig.setTitle(dto.getTitle());&#13;&#10;        gig.setDescription(dto.getDescription());&#13;&#10;        gig.setPlatform(dto.getPlatform());&#13;&#10;        gig.setCategory(dto.getCategory());&#13;&#10;        gig.setStatus(dto.getStatus());&#13;&#10;&#13;&#10;        // --- Map Images ---&#13;&#10;        if (dto.getImages() != null) {&#13;&#10;            List&lt;GigImage&gt; images = dto.getImages().stream().map(imgDTO -&gt; {&#13;&#10;                GigImage img = new GigImage();&#13;&#10;                img.setUrl(imgDTO.getUrl());&#13;&#10;                img.setIsPrimary(imgDTO.isIsPrimary());&#13;&#10;                img.setGig(gig); // Important: Set parent!&#13;&#10;                return img;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            gig.setImages(images);&#13;&#10;        }&#13;&#10;&#13;&#10;        // --- Map Packages ---&#13;&#10;        if (dto.getPackages() != null) {&#13;&#10;            List&lt;GigPackage&gt; packages = dto.getPackages().stream().map(pkgDTO -&gt; {&#13;&#10;                GigPackage pkg = new GigPackage();&#13;&#10;                pkg.setName(pkgDTO.getName());&#13;&#10;                pkg.setPrice(pkgDTO.getPrice());&#13;&#10;                pkg.setDeliveryDays(pkgDTO.getDeliveryDays());&#13;&#10;                pkg.setDescription(pkgDTO.getDescription());&#13;&#10;                pkg.setGig(gig); // Important: Set parent!&#13;&#10;                return pkg;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            gig.setPackages(packages);&#13;&#10;        }&#13;&#10;&#13;&#10;        // --- Map FAQs ---&#13;&#10;        if (dto.getFaqs() != null) {&#13;&#10;            List&lt;GigFaq&gt; faqs = dto.getFaqs().stream().map(faqDTO -&gt; {&#13;&#10;                GigFaq faq = new GigFaq();&#13;&#10;                faq.setQuestion(faqDTO.getQuestion());&#13;&#10;                faq.setAnswer(faqDTO.getAnswer());&#13;&#10;                faq.setGig(gig); // Important: Set parent!&#13;&#10;                return faq;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            gig.setFaqs(faqs);&#13;&#10;        }&#13;&#10;&#13;&#10;        Gig savedGig = gigRepository.save(gig);&#13;&#10;        return mapToResponseDTO(savedGig);&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;GigResponseDTO&gt; getAllGigs() {&#13;&#10;        List&lt;Gig&gt; gigs = gigRepository.findAll();&#13;&#10;        return gigs.stream()&#13;&#10;                .map(this::mapToResponseDTO)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    public GigResponseDTO getGigById(UUID id) {&#13;&#10;        Gig gig = gigRepository.findById(id)&#13;&#10;                .orElseThrow(() -&gt; new NoSuchElementException(&quot;Gig not found&quot;));&#13;&#10;        return mapToResponseDTO(gig);&#13;&#10;    }&#13;&#10;&#13;&#10;    public GigResponseDTO updateGig(UUID id, GigRequestDTO dto) {&#13;&#10;        Gig gig = gigRepository.findById(id)&#13;&#10;                .orElseThrow(() -&gt; new NoSuchElementException(&quot;Gig not found&quot;));&#13;&#10;        gig.setSellerId(dto.getSellerId());&#13;&#10;        gig.setTitle(dto.getTitle());&#13;&#10;        gig.setDescription(dto.getDescription());&#13;&#10;        gig.setPlatform(dto.getPlatform());&#13;&#10;        gig.setCategory(dto.getCategory());&#13;&#10;        gig.setStatus(dto.getStatus());&#13;&#10;&#13;&#10;        // --- Update Images ---&#13;&#10;        gig.getImages().clear();&#13;&#10;        if (dto.getImages() != null) {&#13;&#10;            List&lt;GigImage&gt; images = dto.getImages().stream().map(imgDTO -&gt; {&#13;&#10;                GigImage img = new GigImage();&#13;&#10;                img.setUrl(imgDTO.getUrl());&#13;&#10;                img.setIsPrimary(imgDTO.isIsPrimary());&#13;&#10;                img.setGig(gig);&#13;&#10;                return img;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            gig.getImages().addAll(images);&#13;&#10;        }&#13;&#10;&#13;&#10;        // --- Update Packages ---&#13;&#10;        gig.getPackages().clear();&#13;&#10;        if (dto.getPackages() != null) {&#13;&#10;            List&lt;GigPackage&gt; packages = dto.getPackages().stream().map(pkgDTO -&gt; {&#13;&#10;                GigPackage pkg = new GigPackage();&#13;&#10;                pkg.setName(pkgDTO.getName());&#13;&#10;                pkg.setPrice(pkgDTO.getPrice());&#13;&#10;                pkg.setDeliveryDays(pkgDTO.getDeliveryDays());&#13;&#10;                pkg.setDescription(pkgDTO.getDescription());&#13;&#10;                pkg.setGig(gig);&#13;&#10;                return pkg;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            gig.getPackages().addAll(packages);&#13;&#10;        }&#13;&#10;&#13;&#10;        // --- Update FAQs ---&#13;&#10;        gig.getFaqs().clear();&#13;&#10;        if (dto.getFaqs() != null) {&#13;&#10;            List&lt;GigFaq&gt; faqs = dto.getFaqs().stream().map(faqDTO -&gt; {&#13;&#10;                GigFaq faq = new GigFaq();&#13;&#10;                faq.setQuestion(faqDTO.getQuestion());&#13;&#10;                faq.setAnswer(faqDTO.getAnswer());&#13;&#10;                faq.setGig(gig);&#13;&#10;                return faq;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            gig.getFaqs().addAll(faqs);&#13;&#10;        }&#13;&#10;&#13;&#10;        Gig updatedGig = gigRepository.save(gig);&#13;&#10;        return mapToResponseDTO(updatedGig);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void deleteGig(UUID id) {&#13;&#10;        if (!gigRepository.existsById(id)) {&#13;&#10;            throw new NoSuchElementException(&quot;Gig not found&quot;);&#13;&#10;        }&#13;&#10;        gigRepository.deleteById(id);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get gig and specific package details by gigId and packageId&#13;&#10;     * Verifies that both gig and package exist and that the package belongs to the gig&#13;&#10;     */&#13;&#10;    public GigWithPackageDetailsDTO getGigWithPackageDetails(UUID gigId, UUID packageId) {&#13;&#10;        // First verify that the gig exists&#13;&#10;        Gig gig = gigRepository.findById(gigId)&#13;&#10;                .orElseThrow(() -&gt; new NoSuchElementException(&quot;Gig not found with ID: &quot; + gigId));&#13;&#10;        &#13;&#10;        // Verify that the package exists and belongs to the specified gig&#13;&#10;        GigPackage gigPackage = gigPackageRepository.findByGigIdAndPackageId(gigId, packageId)&#13;&#10;                .orElseThrow(() -&gt; new NoSuchElementException(&#13;&#10;                        &quot;Package not found with ID: &quot; + packageId + &quot; for gig ID: &quot; + gigId));&#13;&#10;        &#13;&#10;        // Map to response DTO&#13;&#10;        return mapToGigWithPackageDetailsDTO(gig, gigPackage);&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Verify if a gig and package combination exists&#13;&#10;     */&#13;&#10;    public boolean verifyGigAndPackageExists(UUID gigId, UUID packageId) {&#13;&#10;        // Check if gig exists&#13;&#10;        if (!gigRepository.existsById(gigId)) {&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;        &#13;&#10;        // Check if package exists for the specific gig&#13;&#10;        return gigPackageRepository.existsByGigIdAndId(gigId, packageId);&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Get all packages for a specific gig&#13;&#10;     */&#13;&#10;    public List&lt;GigPackageDetailsDTO&gt; getPackagesByGigId(UUID gigId) {&#13;&#10;        // Verify gig exists&#13;&#10;        if (!gigRepository.existsById(gigId)) {&#13;&#10;            throw new NoSuchElementException(&quot;Gig not found with ID: &quot; + gigId);&#13;&#10;        }&#13;&#10;        &#13;&#10;        List&lt;GigPackage&gt; packages = gigPackageRepository.findByGigId(gigId);&#13;&#10;        return packages.stream()&#13;&#10;                .map(this::mapToGigPackageDetailsDTO)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    // --- Helper: Entity → DTO ---&#13;&#10;    private GigResponseDTO mapToResponseDTO(Gig gig) {&#13;&#10;        GigResponseDTO dto = new GigResponseDTO();&#13;&#10;        dto.setId(gig.getId());&#13;&#10;        dto.setSellerId(gig.getSellerId());&#13;&#10;        dto.setTitle(gig.getTitle());&#13;&#10;        dto.setDescription(gig.getDescription());&#13;&#10;        dto.setPlatform(gig.getPlatform());&#13;&#10;        dto.setCategory(gig.getCategory());&#13;&#10;        dto.setStatus(gig.getStatus());&#13;&#10;        dto.setCreatedAt(gig.getCreatedAt());&#13;&#10;        dto.setUpdatedAt(gig.getUpdatedAt());&#13;&#10;&#13;&#10;        // --- Map Images ---&#13;&#10;        if (gig.getImages() != null) {&#13;&#10;            List&lt;GigImageDTO&gt; images = gig.getImages().stream().map(img -&gt; {&#13;&#10;                GigImageDTO imgDTO = new GigImageDTO();&#13;&#10;                imgDTO.setUrl(img.getUrl());&#13;&#10;                imgDTO.setIsPrimary(img.isIsPrimary());&#13;&#10;                return imgDTO;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            dto.setImages(images);&#13;&#10;        }&#13;&#10;&#13;&#10;        // --- Map Packages ---&#13;&#10;        if (gig.getPackages() != null) {&#13;&#10;            List&lt;GigPackageDTO&gt; packages = gig.getPackages().stream().map(pkg -&gt; {&#13;&#10;                GigPackageDTO pkgDTO = new GigPackageDTO();&#13;&#10;                pkgDTO.setName(pkg.getName());&#13;&#10;                pkgDTO.setPrice(pkg.getPrice());&#13;&#10;                pkgDTO.setDeliveryDays(pkg.getDeliveryDays());&#13;&#10;                pkgDTO.setDescription(pkg.getDescription());&#13;&#10;                return pkgDTO;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            dto.setPackages(packages);&#13;&#10;        }&#13;&#10;&#13;&#10;        // --- Map FAQs ---&#13;&#10;        if (gig.getFaqs() != null) {&#13;&#10;            List&lt;GigFaqDTO&gt; faqs = gig.getFaqs().stream().map(faq -&gt; {&#13;&#10;                GigFaqDTO faqDTO = new GigFaqDTO();&#13;&#10;                faqDTO.setQuestion(faq.getQuestion());&#13;&#10;                faqDTO.setAnswer(faq.getAnswer());&#13;&#10;                return faqDTO;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            dto.setFaqs(faqs);&#13;&#10;        }&#13;&#10;&#13;&#10;        return dto;&#13;&#10;    }&#13;&#10;    &#13;&#10;    // Helper method to map Gig and GigPackage to GigWithPackageDetailsDTO&#13;&#10;    private GigWithPackageDetailsDTO mapToGigWithPackageDetailsDTO(Gig gig, GigPackage selectedPackage) {&#13;&#10;        GigWithPackageDetailsDTO dto = new GigWithPackageDetailsDTO();&#13;&#10;        &#13;&#10;        // Map gig details&#13;&#10;        dto.setGigId(gig.getId());&#13;&#10;        dto.setSellerId(gig.getSellerId());&#13;&#10;        dto.setTitle(gig.getTitle());&#13;&#10;        dto.setDescription(gig.getDescription());&#13;&#10;        dto.setPlatform(gig.getPlatform());&#13;&#10;        dto.setCategory(gig.getCategory());&#13;&#10;        dto.setStatus(gig.getStatus());&#13;&#10;        dto.setCreatedAt(gig.getCreatedAt());&#13;&#10;        dto.setUpdatedAt(gig.getUpdatedAt());&#13;&#10;        &#13;&#10;        // Map images&#13;&#10;        if (gig.getImages() != null) {&#13;&#10;            List&lt;GigImageDTO&gt; images = gig.getImages().stream().map(img -&gt; {&#13;&#10;                GigImageDTO imgDTO = new GigImageDTO();&#13;&#10;                imgDTO.setUrl(img.getUrl());&#13;&#10;                imgDTO.setIsPrimary(img.isIsPrimary());&#13;&#10;                return imgDTO;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            dto.setImages(images);&#13;&#10;        }&#13;&#10;        &#13;&#10;        // Map FAQs&#13;&#10;        if (gig.getFaqs() != null) {&#13;&#10;            List&lt;GigFaqDTO&gt; faqs = gig.getFaqs().stream().map(faq -&gt; {&#13;&#10;                GigFaqDTO faqDTO = new GigFaqDTO();&#13;&#10;                faqDTO.setQuestion(faq.getQuestion());&#13;&#10;                faqDTO.setAnswer(faq.getAnswer());&#13;&#10;                return faqDTO;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            dto.setFaqs(faqs);&#13;&#10;        }&#13;&#10;        &#13;&#10;        // Map all packages&#13;&#10;        if (gig.getPackages() != null) {&#13;&#10;            List&lt;GigPackageDTO&gt; allPackages = gig.getPackages().stream().map(pkg -&gt; {&#13;&#10;                GigPackageDTO pkgDTO = new GigPackageDTO();&#13;&#10;                pkgDTO.setName(pkg.getName());&#13;&#10;                pkgDTO.setPrice(pkg.getPrice());&#13;&#10;                pkgDTO.setDeliveryDays(pkg.getDeliveryDays());&#13;&#10;                pkgDTO.setDescription(pkg.getDescription());&#13;&#10;                return pkgDTO;&#13;&#10;            }).collect(Collectors.toList());&#13;&#10;            dto.setAllPackages(allPackages);&#13;&#10;        }&#13;&#10;        &#13;&#10;        // Map selected package details&#13;&#10;        dto.setSelectedPackage(mapToGigPackageDetailsDTO(selectedPackage));&#13;&#10;        &#13;&#10;        return dto;&#13;&#10;    }&#13;&#10;    &#13;&#10;    // Helper method to map GigPackage to GigPackageDetailsDTO&#13;&#10;    private GigPackageDetailsDTO mapToGigPackageDetailsDTO(GigPackage gigPackage) {&#13;&#10;        GigPackageDetailsDTO dto = new GigPackageDetailsDTO();&#13;&#10;        dto.setPackageId(gigPackage.getId());&#13;&#10;        dto.setGigId(gigPackage.getGig().getId());&#13;&#10;        dto.setName(gigPackage.getName());&#13;&#10;        dto.setPrice(gigPackage.getPrice());&#13;&#10;        dto.setDeliveryDays(gigPackage.getDeliveryDays());&#13;&#10;        dto.setDescription(gigPackage.getDescription());&#13;&#10;        return dto;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig_service/src/test/java/com/example/gig_service/service/GigServiceIntegrationTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/src/test/java/com/example/gig_service/service/GigServiceIntegrationTest.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig_service/src/test/java/com/example/gig_service/service/GigServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/src/test/java/com/example/gig_service/service/GigServiceTest.java" />
              <option name="originalContent" value="package com.example.gig_service.service;&#10;&#10;import com.example.gig_service.dto.*;&#10;import com.example.gig_service.entity.Gig;&#10;import com.example.gig_service.entity.GigFaq;&#10;import com.example.gig_service.entity.GigImage;&#10;import com.example.gig_service.entity.GigPackage;&#10;import com.example.gig_service.repository.GigRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.*;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.eq;&#10;import static org.mockito.Mockito.*;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class GigServiceTest {&#10;&#10;    @Mock&#10;    private GigRepository gigRepository;&#10;&#10;    @InjectMocks&#10;    private GigService gigService;&#10;&#10;    private UUID testGigId;&#10;    private UUID testSellerId;&#10;    private Gig testGig;&#10;    private GigRequestDTO testGigRequestDTO;&#10;    private GigResponseDTO testGigResponseDTO;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        testGigId = UUID.randomUUID();&#10;        testSellerId = UUID.randomUUID();&#10;&#10;        // Setup test entities&#10;        testGig = createTestGig();&#10;        testGigRequestDTO = createTestGigRequestDTO();&#10;        testGigResponseDTO = createTestGigResponseDTO();&#10;    }&#10;&#10;    @Test&#10;    void createGig_WithValidData_ShouldReturnGigResponseDTO() {&#10;        // Arrange&#10;        Gig savedGig = createTestGig();&#10;        savedGig.setId(testGigId);&#10;        when(gigRepository.save(any(Gig.class))).thenReturn(savedGig);&#10;&#10;        // Act&#10;        GigResponseDTO result = gigService.createGig(testGigRequestDTO);&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertEquals(testGigRequestDTO.getTitle(), result.getTitle());&#10;        assertEquals(testGigRequestDTO.getDescription(), result.getDescription());&#10;        assertEquals(testGigRequestDTO.getSellerId(), result.getSellerId());&#10;        assertEquals(testGigRequestDTO.getPlatform(), result.getPlatform());&#10;        assertEquals(testGigRequestDTO.getCategory(), result.getCategory());&#10;        assertEquals(testGigRequestDTO.getStatus(), result.getStatus());&#10;&#10;        verify(gigRepository, times(1)).save(any(Gig.class));&#10;    }&#10;&#10;    @Test&#10;    void createGig_WithImagesPackagesAndFaqs_ShouldMapCorrectly() {&#10;        // Arrange&#10;        Gig savedGig = createTestGigWithAllFields();&#10;        savedGig.setId(testGigId);&#10;        when(gigRepository.save(any(Gig.class))).thenReturn(savedGig);&#10;&#10;        // Act&#10;        GigResponseDTO result = gigService.createGig(testGigRequestDTO);&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertNotNull(result.getImages());&#10;        assertFalse(result.getImages().isEmpty());&#10;        assertNotNull(result.getPackages());&#10;        assertFalse(result.getPackages().isEmpty());&#10;        assertNotNull(result.getFaqs());&#10;        assertFalse(result.getFaqs().isEmpty());&#10;&#10;        verify(gigRepository, times(1)).save(any(Gig.class));&#10;    }&#10;&#10;    @Test&#10;    void getAllGigs_WhenGigsExist_ShouldReturnListOfGigResponseDTO() {&#10;        // Arrange&#10;        List&lt;Gig&gt; gigs = Arrays.asList(testGig, createTestGig());&#10;        when(gigRepository.findAll()).thenReturn(gigs);&#10;&#10;        // Act&#10;        List&lt;GigResponseDTO&gt; result = gigService.getAllGigs();&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertEquals(2, result.size());&#10;        verify(gigRepository, times(1)).findAll();&#10;    }&#10;&#10;    @Test&#10;    void getAllGigs_WhenNoGigsExist_ShouldReturnEmptyList() {&#10;        // Arrange&#10;        when(gigRepository.findAll()).thenReturn(Collections.emptyList());&#10;&#10;        // Act&#10;        List&lt;GigResponseDTO&gt; result = gigService.getAllGigs();&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertTrue(result.isEmpty());&#10;        verify(gigRepository, times(1)).findAll();&#10;    }&#10;&#10;    @Test&#10;    void getGigById_WhenGigExists_ShouldReturnGigResponseDTO() {&#10;        // Arrange&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.of(testGig));&#10;&#10;        // Act&#10;        GigResponseDTO result = gigService.getGigById(testGigId);&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertEquals(testGig.getTitle(), result.getTitle());&#10;        assertEquals(testGig.getDescription(), result.getDescription());&#10;        verify(gigRepository, times(1)).findById(testGigId);&#10;    }&#10;&#10;    @Test&#10;    void getGigById_WhenGigDoesNotExist_ShouldThrowNoSuchElementException() {&#10;        // Arrange&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.empty());&#10;&#10;        // Act &amp; Assert&#10;        assertThrows(NoSuchElementException.class, () -&gt; {&#10;            gigService.getGigById(testGigId);&#10;        });&#10;&#10;        verify(gigRepository, times(1)).findById(testGigId);&#10;    }&#10;&#10;    @Test&#10;    void updateGig_WhenGigExists_ShouldReturnUpdatedGigResponseDTO() {&#10;        // Arrange&#10;        Gig existingGig = createTestGig();&#10;        existingGig.setId(testGigId);&#10;&#10;        GigRequestDTO updateRequest = createTestGigRequestDTO();&#10;        updateRequest.setTitle(&quot;Updated Title&quot;);&#10;        updateRequest.setDescription(&quot;Updated Description&quot;);&#10;&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.of(existingGig));&#10;        when(gigRepository.save(any(Gig.class))).thenReturn(existingGig);&#10;&#10;        // Act&#10;        GigResponseDTO result = gigService.updateGig(testGigId, updateRequest);&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertEquals(&quot;Updated Title&quot;, result.getTitle());&#10;        assertEquals(&quot;Updated Description&quot;, result.getDescription());&#10;        verify(gigRepository, times(1)).findById(testGigId);&#10;        verify(gigRepository, times(1)).save(any(Gig.class));&#10;    }&#10;&#10;    @Test&#10;    void updateGig_WhenGigDoesNotExist_ShouldThrowNoSuchElementException() {&#10;        // Arrange&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.empty());&#10;&#10;        // Act &amp; Assert&#10;        assertThrows(NoSuchElementException.class, () -&gt; {&#10;            gigService.updateGig(testGigId, testGigRequestDTO);&#10;        });&#10;&#10;        verify(gigRepository, times(1)).findById(testGigId);&#10;        verify(gigRepository, never()).save(any(Gig.class));&#10;    }&#10;&#10;    @Test&#10;    void deleteGig_WhenGigExists_ShouldDeleteSuccessfully() {&#10;        // Arrange&#10;        when(gigRepository.existsById(testGigId)).thenReturn(true);&#10;        doNothing().when(gigRepository).deleteById(testGigId);&#10;&#10;        // Act&#10;        assertDoesNotThrow(() -&gt; {&#10;            gigService.deleteGig(testGigId);&#10;        });&#10;&#10;        // Assert&#10;        verify(gigRepository, times(1)).existsById(testGigId);&#10;        verify(gigRepository, times(1)).deleteById(testGigId);&#10;    }&#10;&#10;    @Test&#10;    void deleteGig_WhenGigDoesNotExist_ShouldThrowNoSuchElementException() {&#10;        // Arrange&#10;        when(gigRepository.existsById(testGigId)).thenReturn(false);&#10;&#10;        // Act &amp; Assert&#10;        assertThrows(NoSuchElementException.class, () -&gt; {&#10;            gigService.deleteGig(testGigId);&#10;        });&#10;&#10;        verify(gigRepository, times(1)).existsById(testGigId);&#10;        verify(gigRepository, never()).deleteById(testGigId);&#10;    }&#10;&#10;    // Helper methods&#10;    private Gig createTestGig() {&#10;        Gig gig = new Gig();&#10;        gig.setId(testGigId);&#10;        gig.setSellerId(testSellerId);&#10;        gig.setTitle(&quot;Test Gig&quot;);&#10;        gig.setDescription(&quot;Test Description&quot;);&#10;        gig.setPlatform(&quot;Test Platform&quot;);&#10;        gig.setCategory(&quot;Test Category&quot;);&#10;        gig.setStatus(&quot;ACTIVE&quot;);&#10;        gig.setImages(new ArrayList&lt;&gt;());&#10;        gig.setPackages(new ArrayList&lt;&gt;());&#10;        gig.setFaqs(new ArrayList&lt;&gt;());&#10;        return gig;&#10;    }&#10;&#10;    private Gig createTestGigWithAllFields() {&#10;        Gig gig = createTestGig();&#10;&#10;        // Add test image&#10;        GigImage image = new GigImage();&#10;        image.setUrl(&quot;http://test-image.com&quot;);&#10;        image.setIsPrimary(true);&#10;        image.setGig(gig);&#10;        gig.getImages().add(image);&#10;&#10;        // Add test package&#10;        GigPackage pkg = new GigPackage();&#10;        pkg.setName(&quot;Basic Package&quot;);&#10;        pkg.setPrice(new BigDecimal(&quot;50.00&quot;));&#10;        pkg.setDeliveryDays(5);&#10;        pkg.setDescription(&quot;Basic package description&quot;);&#10;        pkg.setGig(gig);&#10;        gig.getPackages().add(pkg);&#10;&#10;        // Add test FAQ&#10;        GigFaq faq = new GigFaq();&#10;        faq.setQuestion(&quot;Test Question?&quot;);&#10;        faq.setAnswer(&quot;Test Answer&quot;);&#10;        faq.setGig(gig);&#10;        gig.getFaqs().add(faq);&#10;&#10;        return gig;&#10;    }&#10;&#10;    private GigRequestDTO createTestGigRequestDTO() {&#10;        GigRequestDTO dto = new GigRequestDTO();&#10;        dto.setSellerId(testSellerId);&#10;        dto.setTitle(&quot;Test Gig&quot;);&#10;        dto.setDescription(&quot;Test Description&quot;);&#10;        dto.setPlatform(&quot;Test Platform&quot;);&#10;        dto.setCategory(&quot;Test Category&quot;);&#10;        dto.setStatus(&quot;ACTIVE&quot;);&#10;&#10;        // Add test image DTO&#10;        GigImageDTO imageDTO = new GigImageDTO();&#10;        imageDTO.setUrl(&quot;http://test-image.com&quot;);&#10;        imageDTO.setIsPrimary(true);&#10;        dto.setImages(Arrays.asList(imageDTO));&#10;&#10;        // Add test package DTO&#10;        GigPackageDTO packageDTO = new GigPackageDTO();&#10;        packageDTO.setName(&quot;Basic Package&quot;);&#10;        packageDTO.setPrice(new BigDecimal(&quot;50.00&quot;));&#10;        packageDTO.setDeliveryDays(5);&#10;        packageDTO.setDescription(&quot;Basic package description&quot;);&#10;        dto.setPackages(Arrays.asList(packageDTO));&#10;&#10;        // Add test FAQ DTO&#10;        GigFaqDTO faqDTO = new GigFaqDTO();&#10;        faqDTO.setQuestion(&quot;Test Question?&quot;);&#10;        faqDTO.setAnswer(&quot;Test Answer&quot;);&#10;        dto.setFaqs(Arrays.asList(faqDTO));&#10;&#10;        return dto;&#10;    }&#10;&#10;    private GigResponseDTO createTestGigResponseDTO() {&#10;        GigResponseDTO dto = new GigResponseDTO();&#10;        dto.setId(testGigId);&#10;        dto.setSellerId(testSellerId);&#10;        dto.setTitle(&quot;Test Gig&quot;);&#10;        dto.setDescription(&quot;Test Description&quot;);&#10;        dto.setPlatform(&quot;Test Platform&quot;);&#10;        dto.setCategory(&quot;Test Category&quot;);&#10;        dto.setStatus(&quot;ACTIVE&quot;);&#10;        dto.setImages(new ArrayList&lt;&gt;());&#10;        dto.setPackages(new ArrayList&lt;&gt;());&#10;        dto.setFaqs(new ArrayList&lt;&gt;());&#10;        return dto;&#10;    }&#10;}&#10;&#10;//# Run all tests&#10;//.\mvnw.cmd test&#10;//&#10;//# Run only specific test class&#10;//.\mvnw.cmd test -Dtest=GigServiceTest&#10;//&#10;//# Run tests with verbose output&#10;//.\mvnw.cmd test -X&#10;//&#10;//# Run tests and generate coverage report (if configured)&#10;//.\mvnw.cmd test jacoco:report" />
              <option name="updatedContent" value="package com.example.gig_service.service;&#13;&#10;&#13;&#10;import com.example.gig_service.dto.*;&#13;&#10;import com.example.gig_service.entity.Gig;&#13;&#10;import com.example.gig_service.entity.GigFaq;&#13;&#10;import com.example.gig_service.entity.GigImage;&#13;&#10;import com.example.gig_service.entity.GigPackage;&#13;&#10;import com.example.gig_service.repository.GigRepository;&#13;&#10;import com.example.gig_service.repository.GigPackageRepository;&#13;&#10;import org.junit.jupiter.api.BeforeEach;&#13;&#10;import org.junit.jupiter.api.Test;&#13;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#13;&#10;import org.mockito.InjectMocks;&#13;&#10;import org.mockito.Mock;&#13;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#13;&#10;&#13;&#10;import java.math.BigDecimal;&#13;&#10;import java.util.*;&#13;&#10;&#13;&#10;import static org.junit.jupiter.api.Assertions.*;&#13;&#10;import static org.mockito.ArgumentMatchers.any;&#13;&#10;import static org.mockito.ArgumentMatchers.eq;&#13;&#10;import static org.mockito.Mockito.*;&#13;&#10;&#13;&#10;@ExtendWith(MockitoExtension.class)&#13;&#10;class GigServiceTest {&#13;&#10;&#13;&#10;    @Mock&#13;&#10;    private GigRepository gigRepository;&#13;&#10;    &#13;&#10;    @Mock&#13;&#10;    private GigPackageRepository gigPackageRepository;&#13;&#10;&#13;&#10;    @InjectMocks&#13;&#10;    private GigService gigService;&#13;&#10;&#13;&#10;    private UUID testGigId;&#13;&#10;    private UUID testSellerId;&#13;&#10;    private UUID testPackageId;&#13;&#10;    private Gig testGig;&#13;&#10;    private GigPackage testGigPackage;&#13;&#10;    private GigRequestDTO testGigRequestDTO;&#13;&#10;    private GigResponseDTO testGigResponseDTO;&#13;&#10;&#13;&#10;    @BeforeEach&#13;&#10;    void setUp() {&#13;&#10;        testGigId = UUID.randomUUID();&#13;&#10;        testSellerId = UUID.randomUUID();&#13;&#10;        testPackageId = UUID.randomUUID();&#13;&#10;&#13;&#10;        // Setup test entities&#13;&#10;        testGig = createTestGig();&#13;&#10;        testGigPackage = createTestGigPackage();&#13;&#10;        testGigRequestDTO = createTestGigRequestDTO();&#13;&#10;        testGigResponseDTO = createTestGigResponseDTO();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void createGig_WithValidData_ShouldReturnGigResponseDTO() {&#13;&#10;        // Arrange&#13;&#10;        Gig savedGig = createTestGig();&#13;&#10;        savedGig.setId(testGigId);&#13;&#10;        when(gigRepository.save(any(Gig.class))).thenReturn(savedGig);&#13;&#10;&#13;&#10;        // Act&#13;&#10;        GigResponseDTO result = gigService.createGig(testGigRequestDTO);&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertNotNull(result);&#13;&#10;        assertEquals(testGigRequestDTO.getTitle(), result.getTitle());&#13;&#10;        assertEquals(testGigRequestDTO.getDescription(), result.getDescription());&#13;&#10;        assertEquals(testGigRequestDTO.getSellerId(), result.getSellerId());&#13;&#10;        assertEquals(testGigRequestDTO.getPlatform(), result.getPlatform());&#13;&#10;        assertEquals(testGigRequestDTO.getCategory(), result.getCategory());&#13;&#10;        assertEquals(testGigRequestDTO.getStatus(), result.getStatus());&#13;&#10;&#13;&#10;        verify(gigRepository, times(1)).save(any(Gig.class));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void createGig_WithImagesPackagesAndFaqs_ShouldMapCorrectly() {&#13;&#10;        // Arrange&#13;&#10;        Gig savedGig = createTestGigWithAllFields();&#13;&#10;        savedGig.setId(testGigId);&#13;&#10;        when(gigRepository.save(any(Gig.class))).thenReturn(savedGig);&#13;&#10;&#13;&#10;        // Act&#13;&#10;        GigResponseDTO result = gigService.createGig(testGigRequestDTO);&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertNotNull(result);&#13;&#10;        assertNotNull(result.getImages());&#13;&#10;        assertFalse(result.getImages().isEmpty());&#13;&#10;        assertNotNull(result.getPackages());&#13;&#10;        assertFalse(result.getPackages().isEmpty());&#13;&#10;        assertNotNull(result.getFaqs());&#13;&#10;        assertFalse(result.getFaqs().isEmpty());&#13;&#10;&#13;&#10;        verify(gigRepository, times(1)).save(any(Gig.class));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void getAllGigs_WhenGigsExist_ShouldReturnListOfGigResponseDTO() {&#13;&#10;        // Arrange&#13;&#10;        List&lt;Gig&gt; gigs = Arrays.asList(testGig, createTestGig());&#13;&#10;        when(gigRepository.findAll()).thenReturn(gigs);&#13;&#10;&#13;&#10;        // Act&#13;&#10;        List&lt;GigResponseDTO&gt; result = gigService.getAllGigs();&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertNotNull(result);&#13;&#10;        assertEquals(2, result.size());&#13;&#10;        verify(gigRepository, times(1)).findAll();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void getAllGigs_WhenNoGigsExist_ShouldReturnEmptyList() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.findAll()).thenReturn(Collections.emptyList());&#13;&#10;&#13;&#10;        // Act&#13;&#10;        List&lt;GigResponseDTO&gt; result = gigService.getAllGigs();&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertNotNull(result);&#13;&#10;        assertTrue(result.isEmpty());&#13;&#10;        verify(gigRepository, times(1)).findAll();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void getGigById_WhenGigExists_ShouldReturnGigResponseDTO() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.of(testGig));&#13;&#10;&#13;&#10;        // Act&#13;&#10;        GigResponseDTO result = gigService.getGigById(testGigId);&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertNotNull(result);&#13;&#10;        assertEquals(testGig.getTitle(), result.getTitle());&#13;&#10;        assertEquals(testGig.getDescription(), result.getDescription());&#13;&#10;        verify(gigRepository, times(1)).findById(testGigId);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void getGigById_WhenGigDoesNotExist_ShouldThrowNoSuchElementException() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.empty());&#13;&#10;&#13;&#10;        // Act &amp; Assert&#13;&#10;        assertThrows(NoSuchElementException.class, () -&gt; {&#13;&#10;            gigService.getGigById(testGigId);&#13;&#10;        });&#13;&#10;&#13;&#10;        verify(gigRepository, times(1)).findById(testGigId);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void updateGig_WhenGigExists_ShouldReturnUpdatedGigResponseDTO() {&#13;&#10;        // Arrange&#13;&#10;        Gig existingGig = createTestGig();&#13;&#10;        existingGig.setId(testGigId);&#13;&#10;&#13;&#10;        GigRequestDTO updateRequest = createTestGigRequestDTO();&#13;&#10;        updateRequest.setTitle(&quot;Updated Title&quot;);&#13;&#10;        updateRequest.setDescription(&quot;Updated Description&quot;);&#13;&#10;&#13;&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.of(existingGig));&#13;&#10;        when(gigRepository.save(any(Gig.class))).thenReturn(existingGig);&#13;&#10;&#13;&#10;        // Act&#13;&#10;        GigResponseDTO result = gigService.updateGig(testGigId, updateRequest);&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertNotNull(result);&#13;&#10;        assertEquals(&quot;Updated Title&quot;, result.getTitle());&#13;&#10;        assertEquals(&quot;Updated Description&quot;, result.getDescription());&#13;&#10;        verify(gigRepository, times(1)).findById(testGigId);&#13;&#10;        verify(gigRepository, times(1)).save(any(Gig.class));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void updateGig_WhenGigDoesNotExist_ShouldThrowNoSuchElementException() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.empty());&#13;&#10;&#13;&#10;        // Act &amp; Assert&#13;&#10;        assertThrows(NoSuchElementException.class, () -&gt; {&#13;&#10;            gigService.updateGig(testGigId, testGigRequestDTO);&#13;&#10;        });&#13;&#10;&#13;&#10;        verify(gigRepository, times(1)).findById(testGigId);&#13;&#10;        verify(gigRepository, never()).save(any(Gig.class));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void deleteGig_WhenGigExists_ShouldDeleteSuccessfully() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.existsById(testGigId)).thenReturn(true);&#13;&#10;        doNothing().when(gigRepository).deleteById(testGigId);&#13;&#10;&#13;&#10;        // Act&#13;&#10;        assertDoesNotThrow(() -&gt; {&#13;&#10;            gigService.deleteGig(testGigId);&#13;&#10;        });&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        verify(gigRepository, times(1)).existsById(testGigId);&#13;&#10;        verify(gigRepository, times(1)).deleteById(testGigId);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void deleteGig_WhenGigDoesNotExist_ShouldThrowNoSuchElementException() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.existsById(testGigId)).thenReturn(false);&#13;&#10;&#13;&#10;        // Act &amp; Assert&#13;&#10;        assertThrows(NoSuchElementException.class, () -&gt; {&#13;&#10;            gigService.deleteGig(testGigId);&#13;&#10;        });&#13;&#10;&#13;&#10;        verify(gigRepository, times(1)).existsById(testGigId);&#13;&#10;        verify(gigRepository, never()).deleteById(testGigId);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void getGigWithPackageDetails_WithValidIds_ShouldReturnGigWithPackageDetailsDTO() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.of(testGig));&#13;&#10;        when(gigPackageRepository.findByGigIdAndPackageId(testGigId, testPackageId))&#13;&#10;                .thenReturn(Optional.of(testGigPackage));&#13;&#10;&#13;&#10;        // Act&#13;&#10;        GigWithPackageDetailsDTO result = gigService.getGigWithPackageDetails(testGigId, testPackageId);&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertNotNull(result);&#13;&#10;        assertEquals(testGigId, result.getGigId());&#13;&#10;        assertEquals(testGig.getTitle(), result.getTitle());&#13;&#10;        assertNotNull(result.getSelectedPackage());&#13;&#10;        assertEquals(testPackageId, result.getSelectedPackage().getPackageId());&#13;&#10;        assertEquals(testGigPackage.getName(), result.getSelectedPackage().getName());&#13;&#10;        &#13;&#10;        verify(gigRepository).findById(testGigId);&#13;&#10;        verify(gigPackageRepository).findByGigIdAndPackageId(testGigId, testPackageId);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void getGigWithPackageDetails_WithInvalidGigId_ShouldThrowException() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.empty());&#13;&#10;&#13;&#10;        // Act &amp; Assert&#13;&#10;        NoSuchElementException exception = assertThrows(NoSuchElementException.class, &#13;&#10;                () -&gt; gigService.getGigWithPackageDetails(testGigId, testPackageId));&#13;&#10;        &#13;&#10;        assertTrue(exception.getMessage().contains(&quot;Gig not found with ID: &quot; + testGigId));&#13;&#10;        verify(gigRepository).findById(testGigId);&#13;&#10;        verify(gigPackageRepository, never()).findByGigIdAndPackageId(any(), any());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void getGigWithPackageDetails_WithInvalidPackageId_ShouldThrowException() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.findById(testGigId)).thenReturn(Optional.of(testGig));&#13;&#10;        when(gigPackageRepository.findByGigIdAndPackageId(testGigId, testPackageId))&#13;&#10;                .thenReturn(Optional.empty());&#13;&#10;&#13;&#10;        // Act &amp; Assert&#13;&#10;        NoSuchElementException exception = assertThrows(NoSuchElementException.class, &#13;&#10;                () -&gt; gigService.getGigWithPackageDetails(testGigId, testPackageId));&#13;&#10;        &#13;&#10;        assertTrue(exception.getMessage().contains(&quot;Package not found with ID: &quot; + testPackageId));&#13;&#10;        verify(gigRepository).findById(testGigId);&#13;&#10;        verify(gigPackageRepository).findByGigIdAndPackageId(testGigId, testPackageId);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void verifyGigAndPackageExists_WithValidIds_ShouldReturnTrue() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.existsById(testGigId)).thenReturn(true);&#13;&#10;        when(gigPackageRepository.existsByGigIdAndId(testGigId, testPackageId)).thenReturn(true);&#13;&#10;&#13;&#10;        // Act&#13;&#10;        boolean result = gigService.verifyGigAndPackageExists(testGigId, testPackageId);&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertTrue(result);&#13;&#10;        verify(gigRepository).existsById(testGigId);&#13;&#10;        verify(gigPackageRepository).existsByGigIdAndId(testGigId, testPackageId);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void verifyGigAndPackageExists_WithInvalidGigId_ShouldReturnFalse() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.existsById(testGigId)).thenReturn(false);&#13;&#10;&#13;&#10;        // Act&#13;&#10;        boolean result = gigService.verifyGigAndPackageExists(testGigId, testPackageId);&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertFalse(result);&#13;&#10;        verify(gigRepository).existsById(testGigId);&#13;&#10;        verify(gigPackageRepository, never()).existsByGigIdAndId(any(), any());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void verifyGigAndPackageExists_WithInvalidPackageId_ShouldReturnFalse() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.existsById(testGigId)).thenReturn(true);&#13;&#10;        when(gigPackageRepository.existsByGigIdAndId(testGigId, testPackageId)).thenReturn(false);&#13;&#10;&#13;&#10;        // Act&#13;&#10;        boolean result = gigService.verifyGigAndPackageExists(testGigId, testPackageId);&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertFalse(result);&#13;&#10;        verify(gigRepository).existsById(testGigId);&#13;&#10;        verify(gigPackageRepository).existsByGigIdAndId(testGigId, testPackageId);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void getPackagesByGigId_WithValidGigId_ShouldReturnPackagesList() {&#13;&#10;        // Arrange&#13;&#10;        List&lt;GigPackage&gt; packages = Arrays.asList(testGigPackage, createAnotherTestGigPackage());&#13;&#10;        when(gigRepository.existsById(testGigId)).thenReturn(true);&#13;&#10;        when(gigPackageRepository.findByGigId(testGigId)).thenReturn(packages);&#13;&#10;&#13;&#10;        // Act&#13;&#10;        List&lt;GigPackageDetailsDTO&gt; result = gigService.getPackagesByGigId(testGigId);&#13;&#10;&#13;&#10;        // Assert&#13;&#10;        assertNotNull(result);&#13;&#10;        assertEquals(2, result.size());&#13;&#10;        assertEquals(testPackageId, result.get(0).getPackageId());&#13;&#10;        verify(gigRepository).existsById(testGigId);&#13;&#10;        verify(gigPackageRepository).findByGigId(testGigId);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void getPackagesByGigId_WithInvalidGigId_ShouldThrowException() {&#13;&#10;        // Arrange&#13;&#10;        when(gigRepository.existsById(testGigId)).thenReturn(false);&#13;&#10;&#13;&#10;        // Act &amp; Assert&#13;&#10;        NoSuchElementException exception = assertThrows(NoSuchElementException.class, &#13;&#10;                () -&gt; gigService.getPackagesByGigId(testGigId));&#13;&#10;        &#13;&#10;        assertTrue(exception.getMessage().contains(&quot;Gig not found with ID: &quot; + testGigId));&#13;&#10;        verify(gigRepository).existsById(testGigId);&#13;&#10;        verify(gigPackageRepository, never()).findByGigId(any());&#13;&#10;    }&#13;&#10;&#13;&#10;    // Helper methods&#13;&#10;    private Gig createTestGig() {&#13;&#10;        Gig gig = new Gig();&#13;&#10;        gig.setId(testGigId);&#13;&#10;        gig.setSellerId(testSellerId);&#13;&#10;        gig.setTitle(&quot;Test Gig&quot;);&#13;&#10;        gig.setDescription(&quot;Test Description&quot;);&#13;&#10;        gig.setPlatform(&quot;Test Platform&quot;);&#13;&#10;        gig.setCategory(&quot;Test Category&quot;);&#13;&#10;        gig.setStatus(&quot;ACTIVE&quot;);&#13;&#10;        gig.setImages(new ArrayList&lt;&gt;());&#13;&#10;        gig.setPackages(new ArrayList&lt;&gt;());&#13;&#10;        gig.setFaqs(new ArrayList&lt;&gt;());&#13;&#10;        return gig;&#13;&#10;    }&#13;&#10;&#13;&#10;    private Gig createTestGigWithAllFields() {&#13;&#10;        Gig gig = createTestGig();&#13;&#10;&#13;&#10;        // Add test image&#13;&#10;        GigImage image = new GigImage();&#13;&#10;        image.setUrl(&quot;http://test-image.com&quot;);&#13;&#10;        image.setIsPrimary(true);&#13;&#10;        image.setGig(gig);&#13;&#10;        gig.getImages().add(image);&#13;&#10;&#13;&#10;        // Add test package&#13;&#10;        GigPackage pkg = new GigPackage();&#13;&#10;        pkg.setName(&quot;Basic Package&quot;);&#13;&#10;        pkg.setPrice(new BigDecimal(&quot;50.00&quot;));&#13;&#10;        pkg.setDeliveryDays(5);&#13;&#10;        pkg.setDescription(&quot;Basic package description&quot;);&#13;&#10;        pkg.setGig(gig);&#13;&#10;        gig.getPackages().add(pkg);&#13;&#10;&#13;&#10;        // Add test FAQ&#13;&#10;        GigFaq faq = new GigFaq();&#13;&#10;        faq.setQuestion(&quot;Test Question?&quot;);&#13;&#10;        faq.setAnswer(&quot;Test Answer&quot;);&#13;&#10;        faq.setGig(gig);&#13;&#10;        gig.getFaqs().add(faq);&#13;&#10;&#13;&#10;        return gig;&#13;&#10;    }&#13;&#10;&#13;&#10;    private GigRequestDTO createTestGigRequestDTO() {&#13;&#10;        GigRequestDTO dto = new GigRequestDTO();&#13;&#10;        dto.setSellerId(testSellerId);&#13;&#10;        dto.setTitle(&quot;Test Gig&quot;);&#13;&#10;        dto.setDescription(&quot;Test Description&quot;);&#13;&#10;        dto.setPlatform(&quot;Test Platform&quot;);&#13;&#10;        dto.setCategory(&quot;Test Category&quot;);&#13;&#10;        dto.setStatus(&quot;ACTIVE&quot;);&#13;&#10;&#13;&#10;        // Add test image DTO&#13;&#10;        GigImageDTO imageDTO = new GigImageDTO();&#13;&#10;        imageDTO.setUrl(&quot;http://test-image.com&quot;);&#13;&#10;        imageDTO.setIsPrimary(true);&#13;&#10;        dto.setImages(Arrays.asList(imageDTO));&#13;&#10;&#13;&#10;        // Add test package DTO&#13;&#10;        GigPackageDTO packageDTO = new GigPackageDTO();&#13;&#10;        packageDTO.setName(&quot;Basic Package&quot;);&#13;&#10;        packageDTO.setPrice(new BigDecimal(&quot;50.00&quot;));&#13;&#10;        packageDTO.setDeliveryDays(5);&#13;&#10;        packageDTO.setDescription(&quot;Basic package description&quot;);&#13;&#10;        dto.setPackages(Arrays.asList(packageDTO));&#13;&#10;&#13;&#10;        // Add test FAQ DTO&#13;&#10;        GigFaqDTO faqDTO = new GigFaqDTO();&#13;&#10;        faqDTO.setQuestion(&quot;Test Question?&quot;);&#13;&#10;        faqDTO.setAnswer(&quot;Test Answer&quot;);&#13;&#10;        dto.setFaqs(Arrays.asList(faqDTO));&#13;&#10;&#13;&#10;        return dto;&#13;&#10;    }&#13;&#10;&#13;&#10;    private GigResponseDTO createTestGigResponseDTO() {&#13;&#10;        GigResponseDTO dto = new GigResponseDTO();&#13;&#10;        dto.setId(testGigId);&#13;&#10;        dto.setSellerId(testSellerId);&#13;&#10;        dto.setTitle(&quot;Test Gig&quot;);&#13;&#10;        dto.setDescription(&quot;Test Description&quot;);&#13;&#10;        dto.setPlatform(&quot;Test Platform&quot;);&#13;&#10;        dto.setCategory(&quot;Test Category&quot;);&#13;&#10;        dto.setStatus(&quot;ACTIVE&quot;);&#13;&#10;        dto.setImages(new ArrayList&lt;&gt;());&#13;&#10;        dto.setPackages(new ArrayList&lt;&gt;());&#13;&#10;        dto.setFaqs(new ArrayList&lt;&gt;());&#13;&#10;        return dto;&#13;&#10;    }&#13;&#10;&#13;&#10;    private GigPackage createTestGigPackage() {&#13;&#10;        GigPackage gigPackage = new GigPackage();&#13;&#10;        gigPackage.setId(testPackageId);&#13;&#10;        gigPackage.setGig(testGig);&#13;&#10;        gigPackage.setName(&quot;Basic Package&quot;);&#13;&#10;        gigPackage.setPrice(new BigDecimal(&quot;50.00&quot;));&#13;&#10;        gigPackage.setDeliveryDays(3);&#13;&#10;        gigPackage.setDescription(&quot;Basic package description&quot;);&#13;&#10;        return gigPackage;&#13;&#10;    }&#13;&#10;&#13;&#10;    private GigPackage createAnotherTestGigPackage() {&#13;&#10;        GigPackage gigPackage = new GigPackage();&#13;&#10;        gigPackage.setId(UUID.randomUUID());&#13;&#10;        gigPackage.setGig(testGig);&#13;&#10;        gigPackage.setName(&quot;Premium Package&quot;);&#13;&#10;        gigPackage.setPrice(new BigDecimal(&quot;100.00&quot;));&#13;&#10;        gigPackage.setDeliveryDays(7);&#13;&#10;        gigPackage.setDescription(&quot;Premium package description&quot;);&#13;&#10;        return gigPackage;&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;//# Run all tests&#13;&#10;//.\mvnw.cmd test&#13;&#10;//&#13;&#10;//# Run only specific test class&#13;&#10;//.\mvnw.cmd test -Dtest=GigServiceTest&#13;&#10;//&#13;&#10;//# Run tests with verbose output&#13;&#10;//.\mvnw.cmd test -X&#13;&#10;//&#13;&#10;//# Run tests and generate coverage report (if configured)&#13;&#10;//.\mvnw.cmd test jacoco:report" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/order-booking_service/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/order-booking_service/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=order-booking_service&#10;&#10;spring.datasource.url=jdbc:postgresql://db.wjrgopbrrgctpmrosfkr.supabase.co:5432/postgres&#10;spring.jpa.properties.hibernate.default_schema=orderDb&#10;spring.datasource.username=postgres&#10;spring.datasource.password=Rs2maxrs*&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;&#10; " />
              <option name="updatedContent" value="# Server Configuration&#10;server.port=8081&#10;&#10;# Application Configuration&#10;spring.application.name=order-booking-service&#10;&#10;spring.datasource.url=jdbc:postgresql://db.wjrgopbrrgctpmrosfkr.supabase.co:5432/postgres&#10;spring.jpa.properties.hibernate.default_schema=orderDb&#10;spring.datasource.username=postgres&#10;spring.datasource.password=Rs2maxrs*&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>