<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/gig_service/src/test/java/com/example/gig_service/service/GigServiceIntegrationTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/src/test/java/com/example/gig_service/service/GigServiceIntegrationTest.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/order-booking_service/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/order-booking_service/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=order-booking_service&#10;&#10;spring.datasource.url=jdbc:postgresql://db.wjrgopbrrgctpmrosfkr.supabase.co:5432/postgres&#10;spring.jpa.properties.hibernate.default_schema=orderDb&#10;spring.datasource.username=postgres&#10;spring.datasource.password=Rs2maxrs*&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;&#10; " />
              <option name="updatedContent" value="# Server Configuration&#10;server.port=8081&#10;&#10;# Application Configuration&#10;spring.application.name=order-booking-service&#10;&#10;spring.datasource.url=jdbc:postgresql://db.wjrgopbrrgctpmrosfkr.supabase.co:5432/postgres&#10;spring.jpa.properties.hibernate.default_schema=orderDb&#10;spring.datasource.username=postgres&#10;spring.datasource.password=Rs2maxrs*&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/order_service/src/main/java/com/example/order_service/service/GigServiceClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/order_service/src/main/java/com/example/order_service/service/GigServiceClient.java" />
              <option name="originalContent" value="//package com.example.order_service.service;&#10;//&#10;//import com.example.order_service.dto.GigWithPackageDetailsDTO;&#10;//import org.springframework.beans.factory.annotation.Value;&#10;//import org.springframework.stereotype.Service;&#10;//import org.springframework.web.client.RestTemplate;&#10;//import org.springframework.web.client.HttpClientErrorException;&#10;//&#10;//import java.util.Map;&#10;//import java.util.UUID;&#10;//&#10;//@Service&#10;//public class GigServiceClient {&#10;//&#10;//    private final RestTemplate restTemplate;&#10;//&#10;//    @Value(&quot;${gig.service.url:http://gig_service:8080}&quot;)&#10;//    private String gigServiceBaseUrl;&#10;//&#10;//    public GigServiceClient() {&#10;//        this.restTemplate = new RestTemplate();&#10;//    }&#10;//&#10;//    /**&#10;//     * Verify if a gig and package combination exists&#10;//     */&#10;//    public boolean verifyGigAndPackageExists(UUID gigId, UUID packageId) {&#10;//        try {&#10;//            String url = gigServiceBaseUrl + &quot;/api/gigs/&quot; + gigId + &quot;/packages/&quot; + packageId + &quot;/verify&quot;;&#10;//            Map&lt;String, Boolean&gt; response = restTemplate.getForObject(url, Map.class);&#10;//            return response != null &amp;&amp; response.getOrDefault(&quot;exists&quot;, false);&#10;//        } catch (HttpClientErrorException.NotFound e) {&#10;//            return false;&#10;//        } catch (Exception e) {&#10;//            throw new RuntimeException(&quot;Failed to verify gig and package existence: &quot; + e.getMessage(), e);&#10;//        }&#10;//    }&#10;//&#10;//    /**&#10;//     * Get complete gig and package details from gig service&#10;//     */&#10;//    public GigWithPackageDetailsDTO getGigWithPackageDetails(UUID gigId, UUID packageId) {&#10;//        try {&#10;//            String url = gigServiceBaseUrl + &quot;/api/gigs/&quot; + gigId + &quot;/packages/&quot; + packageId;&#10;//            return restTemplate.getForObject(url, GigWithPackageDetailsDTO.class);&#10;//        } catch (HttpClientErrorException.NotFound e) {&#10;//            throw new RuntimeException(&quot;Gig or package not found&quot;);&#10;//        } catch (Exception e) {&#10;//            throw new RuntimeException(&quot;Failed to fetch gig and package details: &quot; + e.getMessage(), e);&#10;//        }&#10;//    }&#10;//}&#10;&#10;package com.example.order_service.service;&#10;&#10;import com.example.order_service.dto.GigWithPackageDetailsDTO;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.client.RestTemplate;&#10;import org.springframework.web.client.HttpClientErrorException;&#10;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;&#10;@Service&#10;public class GigServiceClient {&#10;&#10;    private final RestTemplate restTemplate;&#10;&#10;    @Value(&quot;${gig.service.url:http://gig_service:8080}&quot;)&#10;    private String gigServiceBaseUrl;&#10;&#10;    public GigServiceClient() {&#10;        this.restTemplate = new RestTemplate();&#10;    }&#10;&#10;    /**&#10;     * Verify if a gig and package combination exists&#10;     */&#10;    public boolean verifyGigAndPackageExists(UUID gigId, UUID packageId) {&#10;        try {&#10;            String url = gigServiceBaseUrl + &quot;/api/gigs/&quot; + gigId + &quot;/packages/&quot; + packageId + &quot;/verify&quot;;&#10;            Map&lt;String, Boolean&gt; response = restTemplate.getForObject(url, Map.class);&#10;            return response != null &amp;&amp; response.getOrDefault(&quot;exists&quot;, false);&#10;        } catch (HttpClientErrorException.NotFound e) {&#10;            return false;&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Failed to verify gig and package existence: &quot; + e.getMessage(), e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get complete gig and package details from gig service&#10;     */&#10;    public GigWithPackageDetailsDTO getGigWithPackageDetails(UUID gigId, UUID packageId) {&#10;        try {&#10;            String url = gigServiceBaseUrl + &quot;/api/gigs/&quot; + gigId + &quot;/packages/&quot; + packageId;&#10;            return restTemplate.getForObject(url, GigWithPackageDetailsDTO.class);&#10;        } catch (HttpClientErrorException.NotFound e) {&#10;            throw new RuntimeException(&quot;Gig or package not found&quot;);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Failed to fetch gig and package details: &quot; + e.getMessage(), e);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="//package com.example.order_service.service;&#13;&#10;//&#13;&#10;//import com.example.order_service.dto.GigWithPackageDetailsDTO;&#13;&#10;//import org.springframework.beans.factory.annotation.Value;&#13;&#10;//import org.springframework.stereotype.Service;&#13;&#10;//import org.springframework.web.client.RestTemplate;&#13;&#10;//import org.springframework.web.client.HttpClientErrorException;&#13;&#10;//&#13;&#10;//import java.util.Map;&#13;&#10;//import java.util.UUID;&#13;&#10;//&#13;&#10;//@Service&#13;&#10;//public class GigServiceClient {&#13;&#10;//&#13;&#10;//    private final RestTemplate restTemplate;&#13;&#10;//&#13;&#10;//    @Value(&quot;${gig.service.url:http://gig_service:8080}&quot;)&#13;&#10;//    private String gigServiceBaseUrl;&#13;&#10;//&#13;&#10;//    public GigServiceClient() {&#13;&#10;//        this.restTemplate = new RestTemplate();&#13;&#10;//    }&#13;&#10;//&#13;&#10;//    /**&#13;&#10;//     * Verify if a gig and package combination exists&#13;&#10;//     */&#13;&#10;//    public boolean verifyGigAndPackageExists(UUID gigId, UUID packageId) {&#13;&#10;//        try {&#13;&#10;//            String url = gigServiceBaseUrl + &quot;/api/gigs/&quot; + gigId + &quot;/packages/&quot; + packageId + &quot;/verify&quot;;&#13;&#10;//            Map&lt;String, Boolean&gt; response = restTemplate.getForObject(url, Map.class);&#13;&#10;//            return response != null &amp;&amp; response.getOrDefault(&quot;exists&quot;, false);&#13;&#10;//        } catch (HttpClientErrorException.NotFound e) {&#13;&#10;//            return false;&#13;&#10;//        } catch (Exception e) {&#13;&#10;//            throw new RuntimeException(&quot;Failed to verify gig and package existence: &quot; + e.getMessage(), e);&#13;&#10;//        }&#13;&#10;//    }&#13;&#10;//&#13;&#10;//    /**&#13;&#10;//     * Get complete gig and package details from gig service&#13;&#10;//     */&#13;&#10;//    public GigWithPackageDetailsDTO getGigWithPackageDetails(UUID gigId, UUID packageId) {&#13;&#10;//        try {&#13;&#10;//            String url = gigServiceBaseUrl + &quot;/api/gigs/&quot; + gigId + &quot;/packages/&quot; + packageId;&#13;&#10;//            return restTemplate.getForObject(url, GigWithPackageDetailsDTO.class);&#13;&#10;//        } catch (HttpClientErrorException.NotFound e) {&#13;&#10;//            throw new RuntimeException(&quot;Gig or package not found&quot;);&#13;&#10;//        } catch (Exception e) {&#13;&#10;//            throw new RuntimeException(&quot;Failed to fetch gig and package details: &quot; + e.getMessage(), e);&#13;&#10;//        }&#13;&#10;//    }&#13;&#10;//}&#13;&#10;&#13;&#10;package com.example.order_service.service;&#13;&#10;&#13;&#10;import com.example.order_service.dto.GigWithPackageDetailsDTO;&#13;&#10;import org.springframework.beans.factory.annotation.Value;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;import org.springframework.web.client.RestTemplate;&#13;&#10;import org.springframework.web.client.HttpClientErrorException;&#13;&#10;&#13;&#10;import java.util.Map;&#13;&#10;import java.util.UUID;&#13;&#10;&#13;&#10;@Service&#13;&#10;public class GigServiceClient {&#13;&#10;&#13;&#10;    private final RestTemplate restTemplate;&#13;&#10;&#13;&#10;    @Value(&quot;${gig.service.url:http://gigservice:8084}&quot;)&#13;&#10;    private String gigServiceBaseUrl;&#13;&#10;&#13;&#10;    public GigServiceClient() {&#13;&#10;        this.restTemplate = new RestTemplate();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Verify if a gig and package combination exists&#13;&#10;     */&#13;&#10;    public boolean verifyGigAndPackageExists(UUID gigId, UUID packageId) {&#13;&#10;        try {&#13;&#10;            String url = gigServiceBaseUrl + &quot;/api/gigs/&quot; + gigId + &quot;/packages/&quot; + packageId + &quot;/verify&quot;;&#13;&#10;            Map&lt;String, Boolean&gt; response = restTemplate.getForObject(url, Map.class);&#13;&#10;            return response != null &amp;&amp; response.getOrDefault(&quot;exists&quot;, false);&#13;&#10;        } catch (HttpClientErrorException.NotFound e) {&#13;&#10;            return false;&#13;&#10;        } catch (Exception e) {&#13;&#10;            throw new RuntimeException(&quot;Failed to verify gig and package existence: &quot; + e.getMessage(), e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get complete gig and package details from gig service&#13;&#10;     */&#13;&#10;    public GigWithPackageDetailsDTO getGigWithPackageDetails(UUID gigId, UUID packageId) {&#13;&#10;        try {&#13;&#10;            String url = gigServiceBaseUrl + &quot;/api/gigs/&quot; + gigId + &quot;/packages/&quot; + packageId;&#13;&#10;            return restTemplate.getForObject(url, GigWithPackageDetailsDTO.class);&#13;&#10;        } catch (HttpClientErrorException.NotFound e) {&#13;&#10;            throw new RuntimeException(&quot;Gig or package not found&quot;);&#13;&#10;        } catch (Exception e) {&#13;&#10;            throw new RuntimeException(&quot;Failed to fetch gig and package details: &quot; + e.getMessage(), e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>