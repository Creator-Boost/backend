<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/chat-service/src/test/java/com/creatorboost/chat_service/service/ChatMessageServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/chat-service/src/test/java/com/creatorboost/chat_service/service/ChatMessageServiceTest.java" />
              <option name="updatedContent" value="package com.creatorboost.chat_service.service;&#10;&#10;import com.creatorboost.chat_service.entity.ChatMessage;&#10;import com.creatorboost.chat_service.repository.ChatMessageRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Arrays;&#10;import java.util.Collections;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.anyString;&#10;import static org.mockito.Mockito.*;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class ChatMessageServiceTest {&#10;&#10;    @Mock&#10;    private ChatMessageRepository repository;&#10;&#10;    @Mock&#10;    private ChatRoomService chatRoomService;&#10;&#10;    @InjectMocks&#10;    private ChatMessageService chatMessageService;&#10;&#10;    private ChatMessage testChatMessage;&#10;    private String testSenderId;&#10;    private String testRecipientId;&#10;    private String testChatId;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        testSenderId = &quot;sender123&quot;;&#10;        testRecipientId = &quot;recipient456&quot;;&#10;        testChatId = &quot;chat789&quot;;&#10;        &#10;        testChatMessage = new ChatMessage();&#10;        testChatMessage.setId(&quot;msg123&quot;);&#10;        testChatMessage.setSenderId(testSenderId);&#10;        testChatMessage.setRecipientId(testRecipientId);&#10;        testChatMessage.setContent(&quot;Test message content&quot;);&#10;        testChatMessage.setTimestamp(LocalDateTime.now());&#10;    }&#10;&#10;    @Test&#10;    void save_WithValidChatMessage_ShouldSaveAndReturnChatMessage() {&#10;        // Arrange&#10;        when(chatRoomService.getChatRoomId(testSenderId, testRecipientId, true))&#10;                .thenReturn(Optional.of(testChatId));&#10;        when(repository.save(any(ChatMessage.class))).thenReturn(testChatMessage);&#10;&#10;        // Act&#10;        ChatMessage result = chatMessageService.save(testChatMessage);&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertEquals(testChatMessage.getId(), result.getId());&#10;        assertEquals(testChatMessage.getSenderId(), result.getSenderId());&#10;        assertEquals(testChatMessage.getRecipientId(), result.getRecipientId());&#10;        assertEquals(testChatMessage.getContent(), result.getContent());&#10;        assertEquals(testChatId, result.getChatId());&#10;        &#10;        verify(chatRoomService, times(1)).getChatRoomId(testSenderId, testRecipientId, true);&#10;        verify(repository, times(1)).save(testChatMessage);&#10;    }&#10;&#10;    @Test&#10;    void save_WhenChatRoomNotFound_ShouldThrowException() {&#10;        // Arrange&#10;        when(chatRoomService.getChatRoomId(testSenderId, testRecipientId, true))&#10;                .thenReturn(Optional.empty());&#10;&#10;        // Act &amp; Assert&#10;        assertThrows(RuntimeException.class, () -&gt; {&#10;            chatMessageService.save(testChatMessage);&#10;        });&#10;        &#10;        verify(chatRoomService, times(1)).getChatRoomId(testSenderId, testRecipientId, true);&#10;        verify(repository, never()).save(any(ChatMessage.class));&#10;    }&#10;&#10;    @Test&#10;    void save_ShouldSetChatIdOnMessage() {&#10;        // Arrange&#10;        ChatMessage messageWithoutChatId = new ChatMessage();&#10;        messageWithoutChatId.setSenderId(testSenderId);&#10;        messageWithoutChatId.setRecipientId(testRecipientId);&#10;        messageWithoutChatId.setContent(&quot;Test content&quot;);&#10;        &#10;        when(chatRoomService.getChatRoomId(testSenderId, testRecipientId, true))&#10;                .thenReturn(Optional.of(testChatId));&#10;        when(repository.save(any(ChatMessage.class))).thenReturn(messageWithoutChatId);&#10;&#10;        // Act&#10;        ChatMessage result = chatMessageService.save(messageWithoutChatId);&#10;&#10;        // Assert&#10;        assertEquals(testChatId, messageWithoutChatId.getChatId());&#10;        verify(chatRoomService, times(1)).getChatRoomId(testSenderId, testRecipientId, true);&#10;        verify(repository, times(1)).save(messageWithoutChatId);&#10;    }&#10;&#10;    @Test&#10;    void findChatMessages_WhenChatRoomExists_ShouldReturnMessages() {&#10;        // Arrange&#10;        List&lt;ChatMessage&gt; expectedMessages = Arrays.asList(&#10;                createChatMessage(&quot;msg1&quot;, &quot;Hello&quot;),&#10;                createChatMessage(&quot;msg2&quot;, &quot;How are you?&quot;),&#10;                createChatMessage(&quot;msg3&quot;, &quot;Good, thanks!&quot;)&#10;        );&#10;        &#10;        when(chatRoomService.getChatRoomId(testSenderId, testRecipientId, false))&#10;                .thenReturn(Optional.of(testChatId));&#10;        when(repository.findByChatId(testChatId)).thenReturn(expectedMessages);&#10;&#10;        // Act&#10;        List&lt;ChatMessage&gt; result = chatMessageService.findChatMessages(testSenderId, testRecipientId);&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertEquals(3, result.size());&#10;        assertEquals(expectedMessages, result);&#10;        &#10;        verify(chatRoomService, times(1)).getChatRoomId(testSenderId, testRecipientId, false);&#10;        verify(repository, times(1)).findByChatId(testChatId);&#10;    }&#10;&#10;    @Test&#10;    void findChatMessages_WhenChatRoomDoesNotExist_ShouldReturnEmptyList() {&#10;        // Arrange&#10;        when(chatRoomService.getChatRoomId(testSenderId, testRecipientId, false))&#10;                .thenReturn(Optional.empty());&#10;&#10;        // Act&#10;        List&lt;ChatMessage&gt; result = chatMessageService.findChatMessages(testSenderId, testRecipientId);&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertTrue(result.isEmpty());&#10;        &#10;        verify(chatRoomService, times(1)).getChatRoomId(testSenderId, testRecipientId, false);&#10;        verify(repository, never()).findByChatId(anyString());&#10;    }&#10;&#10;    @Test&#10;    void findChatMessages_WhenNoChatMessagesExist_ShouldReturnEmptyList() {&#10;        // Arrange&#10;        when(chatRoomService.getChatRoomId(testSenderId, testRecipientId, false))&#10;                .thenReturn(Optional.of(testChatId));&#10;        when(repository.findByChatId(testChatId)).thenReturn(Collections.emptyList());&#10;&#10;        // Act&#10;        List&lt;ChatMessage&gt; result = chatMessageService.findChatMessages(testSenderId, testRecipientId);&#10;&#10;        // Assert&#10;        assertNotNull(result);&#10;        assertTrue(result.isEmpty());&#10;        &#10;        verify(chatRoomService, times(1)).getChatRoomId(testSenderId, testRecipientId, false);&#10;        verify(repository, times(1)).findByChatId(testChatId);&#10;    }&#10;&#10;    @Test&#10;    void findChatMessages_WithValidUsers_ShouldCallChatRoomServiceWithCorrectParameters() {&#10;        // Arrange&#10;        when(chatRoomService.getChatRoomId(testSenderId, testRecipientId, false))&#10;                .thenReturn(Optional.of(testChatId));&#10;        when(repository.findByChatId(testChatId)).thenReturn(Collections.emptyList());&#10;&#10;        // Act&#10;        chatMessageService.findChatMessages(testSenderId, testRecipientId);&#10;&#10;        // Assert&#10;        verify(chatRoomService, times(1)).getChatRoomId(&#10;                eq(testSenderId), &#10;                eq(testRecipientId), &#10;                eq(false)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void save_WithValidUsers_ShouldCallChatRoomServiceWithCorrectParameters() {&#10;        // Arrange&#10;        when(chatRoomService.getChatRoomId(testSenderId, testRecipientId, true))&#10;                .thenReturn(Optional.of(testChatId));&#10;        when(repository.save(any(ChatMessage.class))).thenReturn(testChatMessage);&#10;&#10;        // Act&#10;        chatMessageService.save(testChatMessage);&#10;&#10;        // Assert&#10;        verify(chatRoomService, times(1)).getChatRoomId(&#10;                eq(testSenderId), &#10;                eq(testRecipientId), &#10;                eq(true)&#10;        );&#10;    }&#10;&#10;    // Helper method&#10;    private ChatMessage createChatMessage(String id, String content) {&#10;        ChatMessage message = new ChatMessage();&#10;        message.setId(id);&#10;        message.setSenderId(testSenderId);&#10;        message.setRecipientId(testRecipientId);&#10;        message.setContent(content);&#10;        message.setChatId(testChatId);&#10;        message.setTimestamp(LocalDateTime.now());&#10;        return message;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/chat-service/src/test/java/com/creatorboost/chat_service/service/ChatRoomServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/chat-service/src/test/java/com/creatorboost/chat_service/service/ChatRoomServiceTest.java" />
              <option name="updatedContent" value="package com.creatorboost.chat_service.service;&#10;&#10;import com.creatorboost.chat_service.entity.ChatRoom;&#10;import com.creatorboost.chat_service.repository.ChatRoomRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.Mockito.*;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class ChatRoomServiceTest {&#10;&#10;    @Mock&#10;    private ChatRoomRepository chatRoomRepository;&#10;&#10;    @InjectMocks&#10;    private ChatRoomService chatRoomService;&#10;&#10;    private String testSenderId;&#10;    private String testRecipientId;&#10;    private String testChatId;&#10;    private ChatRoom testChatRoom;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        testSenderId = &quot;sender123&quot;;&#10;        testRecipientId = &quot;recipient456&quot;;&#10;        testChatId = &quot;sender123_recipient456&quot;;&#10;        &#10;        testChatRoom = ChatRoom.builder()&#10;                .chatId(testChatId)&#10;                .senderId(testSenderId)&#10;                .recipientId(testRecipientId)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void getChatRoomId_WhenChatRoomExists_ShouldReturnChatId() {&#10;        // Arrange&#10;        when(chatRoomRepository.findBySenderIdAndRecipientId(testSenderId, testRecipientId))&#10;                .thenReturn(Optional.of(testChatRoom));&#10;&#10;        // Act&#10;        Optional&lt;String&gt; result = chatRoomService.getChatRoomId(testSenderId, testRecipientId, false);&#10;&#10;        // Assert&#10;        assertTrue(result.isPresent());&#10;        assertEquals(testChatId, result.get());&#10;        verify(chatRoomRepository, times(1)).findBySenderIdAndRecipientId(testSenderId, testRecipientId);&#10;        verify(chatRoomRepository, never()).save(any(ChatRoom.class));&#10;    }&#10;&#10;    @Test&#10;    void getChatRoomId_WhenChatRoomDoesNotExistAndCreateNewIsTrue_ShouldCreateAndReturnChatId() {&#10;        // Arrange&#10;        when(chatRoomRepository.findBySenderIdAndRecipientId(testSenderId, testRecipientId))&#10;                .thenReturn(Optional.empty());&#10;        when(chatRoomRepository.save(any(ChatRoom.class))).thenReturn(testChatRoom);&#10;&#10;        // Act&#10;        Optional&lt;String&gt; result = chatRoomService.getChatRoomId(testSenderId, testRecipientId, true);&#10;&#10;        // Assert&#10;        assertTrue(result.isPresent());&#10;        assertEquals(testChatId, result.get());&#10;        verify(chatRoomRepository, times(1)).findBySenderIdAndRecipientId(testSenderId, testRecipientId);&#10;        verify(chatRoomRepository, times(2)).save(any(ChatRoom.class)); // Should save both directions&#10;    }&#10;&#10;    @Test&#10;    void getChatRoomId_WhenChatRoomDoesNotExistAndCreateNewIsFalse_ShouldReturnEmpty() {&#10;        // Arrange&#10;        when(chatRoomRepository.findBySenderIdAndRecipientId(testSenderId, testRecipientId))&#10;                .thenReturn(Optional.empty());&#10;&#10;        // Act&#10;        Optional&lt;String&gt; result = chatRoomService.getChatRoomId(testSenderId, testRecipientId, false);&#10;&#10;        // Assert&#10;        assertFalse(result.isPresent());&#10;        verify(chatRoomRepository, times(1)).findBySenderIdAndRecipientId(testSenderId, testRecipientId);&#10;        verify(chatRoomRepository, never()).save(any(ChatRoom.class));&#10;    }&#10;&#10;    @Test&#10;    void getChatRoomId_WhenCreatingNewChatRoom_ShouldCreateBothDirections() {&#10;        // Arrange&#10;        when(chatRoomRepository.findBySenderIdAndRecipientId(testSenderId, testRecipientId))&#10;                .thenReturn(Optional.empty());&#10;        when(chatRoomRepository.save(any(ChatRoom.class))).thenReturn(testChatRoom);&#10;&#10;        // Act&#10;        Optional&lt;String&gt; result = chatRoomService.getChatRoomId(testSenderId, testRecipientId, true);&#10;&#10;        // Assert&#10;        assertTrue(result.isPresent());&#10;        verify(chatRoomRepository, times(2)).save(any(ChatRoom.class));&#10;        &#10;        // Verify that both sender-&gt;recipient and recipient-&gt;sender chat rooms are created&#10;        verify(chatRoomRepository).save(argThat(chatRoom -&gt; &#10;            chatRoom.getSenderId().equals(testSenderId) &amp;&amp; &#10;            chatRoom.getRecipientId().equals(testRecipientId)&#10;        ));&#10;        verify(chatRoomRepository).save(argThat(chatRoom -&gt; &#10;            chatRoom.getSenderId().equals(testRecipientId) &amp;&amp; &#10;            chatRoom.getRecipientId().equals(testSenderId)&#10;        ));&#10;    }&#10;&#10;    @Test&#10;    void getChatRoomId_ShouldGenerateCorrectChatIdFormat() {&#10;        // Arrange&#10;        when(chatRoomRepository.findBySenderIdAndRecipientId(testSenderId, testRecipientId))&#10;                .thenReturn(Optional.empty());&#10;        when(chatRoomRepository.save(any(ChatRoom.class))).thenReturn(testChatRoom);&#10;&#10;        // Act&#10;        Optional&lt;String&gt; result = chatRoomService.getChatRoomId(testSenderId, testRecipientId, true);&#10;&#10;        // Assert&#10;        assertTrue(result.isPresent());&#10;        assertEquals(&quot;sender123_recipient456&quot;, result.get());&#10;    }&#10;&#10;    @Test&#10;    void getChatRoomId_WithNullParameters_ShouldHandleGracefully() {&#10;        // Act &amp; Assert - These should be handled by the repository layer&#10;        assertDoesNotThrow(() -&gt; {&#10;            chatRoomService.getChatRoomId(null, testRecipientId, false);&#10;        });&#10;        &#10;        assertDoesNotThrow(() -&gt; {&#10;            chatRoomService.getChatRoomId(testSenderId, null, false);&#10;        });&#10;    }&#10;&#10;    @Test&#10;    void getChatRoomId_WithEmptyStrings_ShouldCreateValidChatId() {&#10;        // Arrange&#10;        String emptySender = &quot;&quot;;&#10;        String emptyRecipient = &quot;&quot;;&#10;        when(chatRoomRepository.findBySenderIdAndRecipientId(emptySender, emptyRecipient))&#10;                .thenReturn(Optional.empty());&#10;        when(chatRoomRepository.save(any(ChatRoom.class))).thenReturn(testChatRoom);&#10;&#10;        // Act&#10;        Optional&lt;String&gt; result = chatRoomService.getChatRoomId(emptySender, emptyRecipient, true);&#10;&#10;        // Assert&#10;        assertTrue(result.isPresent());&#10;        assertEquals(&quot;_&quot;, result.get());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig_service/src/test/java/com/example/gig_service/service/GigServiceIntegrationTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig_service/src/test/java/com/example/gig_service/service/GigServiceIntegrationTest.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/order-booking_service/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/order-booking_service/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=order-booking_service&#10;&#10;spring.datasource.url=jdbc:postgresql://db.wjrgopbrrgctpmrosfkr.supabase.co:5432/postgres&#10;spring.jpa.properties.hibernate.default_schema=orderDb&#10;spring.datasource.username=postgres&#10;spring.datasource.password=Rs2maxrs*&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;&#10; " />
              <option name="updatedContent" value="# Server Configuration&#10;server.port=8081&#10;&#10;# Application Configuration&#10;spring.application.name=order-booking-service&#10;&#10;spring.datasource.url=jdbc:postgresql://db.wjrgopbrrgctpmrosfkr.supabase.co:5432/postgres&#10;spring.jpa.properties.hibernate.default_schema=orderDb&#10;spring.datasource.username=postgres&#10;spring.datasource.password=Rs2maxrs*&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>