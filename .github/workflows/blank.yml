# This is a basic workflow to help you get started with Actions
name: CI
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["auth-service", "chat-service", "notification-service"]
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Set up JDK (Java 17, change if needed)
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # Cache Maven dependencies to speed up builds
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      # Optional debug - List current directory to verify structure
      - name: List current directory
        run: ls -la ./
        
      # Build and test individual service
      - name: Build and Test ${{ matrix.service }}
        run: mvn -f ${{ matrix.service }}/pom.xml clean verify
        
      # Build and test all services together (if you have a parent pom)
      - name: Build and Test All Services
        run: mvn clean verify
        
      # Alternative: Build with parent pom if it exists in root
      - name: Build with Maven (parent pom)
        if: hashFiles('pom.xml') != ''
        run: mvn -f pom.xml clean verify
