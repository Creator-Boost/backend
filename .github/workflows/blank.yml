# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  # Job to detect changed microservices
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files: $CHANGED_FILES"
          
          # Extract unique service directories (assuming each microservice is in its own directory)
          SERVICES=$(echo "$CHANGED_FILES" | grep -E '\.(java|xml|properties|yml|yaml)$' | cut -d'/' -f1 | sort -u | grep -v '^$' | tr '\n' ' ')
          
          if [ -z "$SERVICES" ]; then
            # If no specific services detected, build all (fallback)
            SERVICES="."
          fi
          
          echo "Detected services: $SERVICES"
          echo "services=$SERVICES" >> $GITHUB_OUTPUT

      - name: Set matrix
        id: set-matrix
        run: |
          # Convert services to JSON array for matrix
          SERVICES="${{ steps.changes.outputs.services }}"
          if [ "$SERVICES" == "." ]; then
            # Build all services - you'll need to adjust this list based on your project structure
            MATRIX='["user-service", "order-service", "product-service", "gateway-service", "discovery-service"]'
          else
            MATRIX=$(echo $SERVICES | jq -R -s -c 'split(" ") | map(select(length > 0))')
          fi
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  # Build and test job
  build-and-test:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Verify service directory exists
        run: |
          if [ ! -d "${{ matrix.service }}" ]; then
            echo "Service directory ${{ matrix.service }} not found. Skipping..."
            exit 0
          fi

      - name: Run tests for ${{ matrix.service }}
        run: |
          if [ -f "${{ matrix.service }}/pom.xml" ]; then
            cd ${{ matrix.service }}
            mvn clean test
          else
            echo "No pom.xml found in ${{ matrix.service }}, skipping tests"
          fi

      - name: Build ${{ matrix.service }}
        run: |
          if [ -f "${{ matrix.service }}/pom.xml" ]; then
            cd ${{ matrix.service }}
            mvn clean package -DskipTests
          else
            echo "No pom.xml found in ${{ matrix.service }}, skipping build"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.service }}
          path: ${{ matrix.service }}/target/surefire-reports/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jar-${{ matrix.service }}
          path: ${{ matrix.service }}/target/*.jar

  # Code quality and security checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # You'll need to configure SonarCloud for your project
          # mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
  # This workflow contains a single job called "build"
  #build:
    # The type of runner that the job will run on
    #runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    #steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v4

      # Runs a single command using the runners shell
    #  - name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
     # - name: Run a multi-line script
       # run: |
        #  echo Add other actions to build,
        #  echo test, and deploy your project.
